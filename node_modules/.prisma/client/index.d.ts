
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Masjid
 * 
 */
export type Masjid = $Result.DefaultSelection<Prisma.$MasjidPayload>
/**
 * Model Home
 * 
 */
export type Home = $Result.DefaultSelection<Prisma.$HomePayload>
/**
 * Model MealAssignment
 * 
 */
export type MealAssignment = $Result.DefaultSelection<Prisma.$MealAssignmentPayload>
/**
 * Model SwapRequest
 * 
 */
export type SwapRequest = $Result.DefaultSelection<Prisma.$SwapRequestPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MealType: {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER'
};

export type MealType = (typeof MealType)[keyof typeof MealType]


export const SwapStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type SwapStatus = (typeof SwapStatus)[keyof typeof SwapStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type MealType = $Enums.MealType

export const MealType: typeof $Enums.MealType

export type SwapStatus = $Enums.SwapStatus

export const SwapStatus: typeof $Enums.SwapStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.masjid`: Exposes CRUD operations for the **Masjid** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Masjids
    * const masjids = await prisma.masjid.findMany()
    * ```
    */
  get masjid(): Prisma.MasjidDelegate<ExtArgs>;

  /**
   * `prisma.home`: Exposes CRUD operations for the **Home** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Homes
    * const homes = await prisma.home.findMany()
    * ```
    */
  get home(): Prisma.HomeDelegate<ExtArgs>;

  /**
   * `prisma.mealAssignment`: Exposes CRUD operations for the **MealAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealAssignments
    * const mealAssignments = await prisma.mealAssignment.findMany()
    * ```
    */
  get mealAssignment(): Prisma.MealAssignmentDelegate<ExtArgs>;

  /**
   * `prisma.swapRequest`: Exposes CRUD operations for the **SwapRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SwapRequests
    * const swapRequests = await prisma.swapRequest.findMany()
    * ```
    */
  get swapRequest(): Prisma.SwapRequestDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Masjid: 'Masjid',
    Home: 'Home',
    MealAssignment: 'MealAssignment',
    SwapRequest: 'SwapRequest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'masjid' | 'home' | 'mealAssignment' | 'swapRequest'
      txIsolationLevel: never
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Masjid: {
        payload: Prisma.$MasjidPayload<ExtArgs>
        fields: Prisma.MasjidFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasjidFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasjidFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>
          }
          findFirst: {
            args: Prisma.MasjidFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasjidFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>
          }
          findMany: {
            args: Prisma.MasjidFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>[]
          }
          create: {
            args: Prisma.MasjidCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>
          }
          createMany: {
            args: Prisma.MasjidCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MasjidDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>
          }
          update: {
            args: Prisma.MasjidUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>
          }
          deleteMany: {
            args: Prisma.MasjidDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MasjidUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MasjidUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MasjidPayload>
          }
          aggregate: {
            args: Prisma.MasjidAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMasjid>
          }
          groupBy: {
            args: Prisma.MasjidGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MasjidGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MasjidFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.MasjidAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.MasjidCountArgs<ExtArgs>,
            result: $Utils.Optional<MasjidCountAggregateOutputType> | number
          }
        }
      }
      Home: {
        payload: Prisma.$HomePayload<ExtArgs>
        fields: Prisma.HomeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HomeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HomeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          findFirst: {
            args: Prisma.HomeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HomeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          findMany: {
            args: Prisma.HomeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>[]
          }
          create: {
            args: Prisma.HomeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          createMany: {
            args: Prisma.HomeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HomeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          update: {
            args: Prisma.HomeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          deleteMany: {
            args: Prisma.HomeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HomeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HomeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          aggregate: {
            args: Prisma.HomeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHome>
          }
          groupBy: {
            args: Prisma.HomeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HomeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.HomeFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.HomeAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.HomeCountArgs<ExtArgs>,
            result: $Utils.Optional<HomeCountAggregateOutputType> | number
          }
        }
      }
      MealAssignment: {
        payload: Prisma.$MealAssignmentPayload<ExtArgs>
        fields: Prisma.MealAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealAssignmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealAssignmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>
          }
          findFirst: {
            args: Prisma.MealAssignmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealAssignmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>
          }
          findMany: {
            args: Prisma.MealAssignmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>[]
          }
          create: {
            args: Prisma.MealAssignmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>
          }
          createMany: {
            args: Prisma.MealAssignmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MealAssignmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>
          }
          update: {
            args: Prisma.MealAssignmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.MealAssignmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MealAssignmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MealAssignmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MealAssignmentPayload>
          }
          aggregate: {
            args: Prisma.MealAssignmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMealAssignment>
          }
          groupBy: {
            args: Prisma.MealAssignmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MealAssignmentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MealAssignmentFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.MealAssignmentAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.MealAssignmentCountArgs<ExtArgs>,
            result: $Utils.Optional<MealAssignmentCountAggregateOutputType> | number
          }
        }
      }
      SwapRequest: {
        payload: Prisma.$SwapRequestPayload<ExtArgs>
        fields: Prisma.SwapRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SwapRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwapRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          findFirst: {
            args: Prisma.SwapRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwapRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          findMany: {
            args: Prisma.SwapRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>[]
          }
          create: {
            args: Prisma.SwapRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          createMany: {
            args: Prisma.SwapRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SwapRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          update: {
            args: Prisma.SwapRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          deleteMany: {
            args: Prisma.SwapRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SwapRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SwapRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          aggregate: {
            args: Prisma.SwapRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSwapRequest>
          }
          groupBy: {
            args: Prisma.SwapRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SwapRequestGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SwapRequestFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.SwapRequestAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.SwapRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<SwapRequestCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    masjids: number
    homes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masjids?: boolean | UserCountOutputTypeCountMasjidsArgs
    homes?: boolean | UserCountOutputTypeCountHomesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMasjidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasjidWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeWhereInput
  }


  /**
   * Count Type MasjidCountOutputType
   */

  export type MasjidCountOutputType = {
    homes: number
  }

  export type MasjidCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homes?: boolean | MasjidCountOutputTypeCountHomesArgs
  }

  // Custom InputTypes
  /**
   * MasjidCountOutputType without action
   */
  export type MasjidCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasjidCountOutputType
     */
    select?: MasjidCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasjidCountOutputType without action
   */
  export type MasjidCountOutputTypeCountHomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeWhereInput
  }


  /**
   * Count Type HomeCountOutputType
   */

  export type HomeCountOutputType = {
    mealAssignments: number
    swapRequests: number
  }

  export type HomeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealAssignments?: boolean | HomeCountOutputTypeCountMealAssignmentsArgs
    swapRequests?: boolean | HomeCountOutputTypeCountSwapRequestsArgs
  }

  // Custom InputTypes
  /**
   * HomeCountOutputType without action
   */
  export type HomeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeCountOutputType
     */
    select?: HomeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HomeCountOutputType without action
   */
  export type HomeCountOutputTypeCountMealAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealAssignmentWhereInput
  }

  /**
   * HomeCountOutputType without action
   */
  export type HomeCountOutputTypeCountSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    masjids?: boolean | User$masjidsArgs<ExtArgs>
    homes?: boolean | User$homesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masjids?: boolean | User$masjidsArgs<ExtArgs>
    homes?: boolean | User$homesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      masjids: Prisma.$MasjidPayload<ExtArgs>[]
      homes: Prisma.$HomePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    masjids<T extends User$masjidsArgs<ExtArgs> = {}>(args?: Subset<T, User$masjidsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findMany'> | Null>;

    homes<T extends User$homesArgs<ExtArgs> = {}>(args?: Subset<T, User$homesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.masjids
   */
  export type User$masjidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    where?: MasjidWhereInput
    orderBy?: MasjidOrderByWithRelationInput | MasjidOrderByWithRelationInput[]
    cursor?: MasjidWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasjidScalarFieldEnum | MasjidScalarFieldEnum[]
  }

  /**
   * User.homes
   */
  export type User$homesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    where?: HomeWhereInput
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    cursor?: HomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Masjid
   */

  export type AggregateMasjid = {
    _count: MasjidCountAggregateOutputType | null
    _min: MasjidMinAggregateOutputType | null
    _max: MasjidMaxAggregateOutputType | null
  }

  export type MasjidMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    contactInfo: string | null
    adminId: string | null
  }

  export type MasjidMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    contactInfo: string | null
    adminId: string | null
  }

  export type MasjidCountAggregateOutputType = {
    id: number
    name: number
    address: number
    contactInfo: number
    adminId: number
    _all: number
  }


  export type MasjidMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contactInfo?: true
    adminId?: true
  }

  export type MasjidMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contactInfo?: true
    adminId?: true
  }

  export type MasjidCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contactInfo?: true
    adminId?: true
    _all?: true
  }

  export type MasjidAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masjid to aggregate.
     */
    where?: MasjidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masjids to fetch.
     */
    orderBy?: MasjidOrderByWithRelationInput | MasjidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasjidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masjids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masjids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Masjids
    **/
    _count?: true | MasjidCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasjidMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasjidMaxAggregateInputType
  }

  export type GetMasjidAggregateType<T extends MasjidAggregateArgs> = {
        [P in keyof T & keyof AggregateMasjid]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasjid[P]>
      : GetScalarType<T[P], AggregateMasjid[P]>
  }




  export type MasjidGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasjidWhereInput
    orderBy?: MasjidOrderByWithAggregationInput | MasjidOrderByWithAggregationInput[]
    by: MasjidScalarFieldEnum[] | MasjidScalarFieldEnum
    having?: MasjidScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasjidCountAggregateInputType | true
    _min?: MasjidMinAggregateInputType
    _max?: MasjidMaxAggregateInputType
  }

  export type MasjidGroupByOutputType = {
    id: string
    name: string
    address: string
    contactInfo: string
    adminId: string
    _count: MasjidCountAggregateOutputType | null
    _min: MasjidMinAggregateOutputType | null
    _max: MasjidMaxAggregateOutputType | null
  }

  type GetMasjidGroupByPayload<T extends MasjidGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasjidGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasjidGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasjidGroupByOutputType[P]>
            : GetScalarType<T[P], MasjidGroupByOutputType[P]>
        }
      >
    >


  export type MasjidSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contactInfo?: boolean
    adminId?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    homes?: boolean | Masjid$homesArgs<ExtArgs>
    _count?: boolean | MasjidCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masjid"]>

  export type MasjidSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    contactInfo?: boolean
    adminId?: boolean
  }


  export type MasjidInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    homes?: boolean | Masjid$homesArgs<ExtArgs>
    _count?: boolean | MasjidCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MasjidPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Masjid"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
      homes: Prisma.$HomePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string
      contactInfo: string
      adminId: string
    }, ExtArgs["result"]["masjid"]>
    composites: {}
  }


  type MasjidGetPayload<S extends boolean | null | undefined | MasjidDefaultArgs> = $Result.GetResult<Prisma.$MasjidPayload, S>

  type MasjidCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MasjidFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MasjidCountAggregateInputType | true
    }

  export interface MasjidDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Masjid'], meta: { name: 'Masjid' } }
    /**
     * Find zero or one Masjid that matches the filter.
     * @param {MasjidFindUniqueArgs} args - Arguments to find a Masjid
     * @example
     * // Get one Masjid
     * const masjid = await prisma.masjid.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MasjidFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MasjidFindUniqueArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Masjid that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MasjidFindUniqueOrThrowArgs} args - Arguments to find a Masjid
     * @example
     * // Get one Masjid
     * const masjid = await prisma.masjid.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MasjidFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MasjidFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Masjid that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidFindFirstArgs} args - Arguments to find a Masjid
     * @example
     * // Get one Masjid
     * const masjid = await prisma.masjid.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MasjidFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MasjidFindFirstArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Masjid that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidFindFirstOrThrowArgs} args - Arguments to find a Masjid
     * @example
     * // Get one Masjid
     * const masjid = await prisma.masjid.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MasjidFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MasjidFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Masjids that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Masjids
     * const masjids = await prisma.masjid.findMany()
     * 
     * // Get first 10 Masjids
     * const masjids = await prisma.masjid.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masjidWithIdOnly = await prisma.masjid.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MasjidFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MasjidFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Masjid.
     * @param {MasjidCreateArgs} args - Arguments to create a Masjid.
     * @example
     * // Create one Masjid
     * const Masjid = await prisma.masjid.create({
     *   data: {
     *     // ... data to create a Masjid
     *   }
     * })
     * 
    **/
    create<T extends MasjidCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MasjidCreateArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Masjids.
     * @param {MasjidCreateManyArgs} args - Arguments to create many Masjids.
     * @example
     * // Create many Masjids
     * const masjid = await prisma.masjid.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MasjidCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MasjidCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Masjid.
     * @param {MasjidDeleteArgs} args - Arguments to delete one Masjid.
     * @example
     * // Delete one Masjid
     * const Masjid = await prisma.masjid.delete({
     *   where: {
     *     // ... filter to delete one Masjid
     *   }
     * })
     * 
    **/
    delete<T extends MasjidDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MasjidDeleteArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Masjid.
     * @param {MasjidUpdateArgs} args - Arguments to update one Masjid.
     * @example
     * // Update one Masjid
     * const masjid = await prisma.masjid.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MasjidUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MasjidUpdateArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Masjids.
     * @param {MasjidDeleteManyArgs} args - Arguments to filter Masjids to delete.
     * @example
     * // Delete a few Masjids
     * const { count } = await prisma.masjid.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MasjidDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MasjidDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masjids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Masjids
     * const masjid = await prisma.masjid.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MasjidUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MasjidUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Masjid.
     * @param {MasjidUpsertArgs} args - Arguments to update or create a Masjid.
     * @example
     * // Update or create a Masjid
     * const masjid = await prisma.masjid.upsert({
     *   create: {
     *     // ... data to create a Masjid
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Masjid we want to update
     *   }
     * })
    **/
    upsert<T extends MasjidUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MasjidUpsertArgs<ExtArgs>>
    ): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Masjids that matches the filter.
     * @param {MasjidFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const masjid = await prisma.masjid.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MasjidFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Masjid.
     * @param {MasjidAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const masjid = await prisma.masjid.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MasjidAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Masjids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidCountArgs} args - Arguments to filter Masjids to count.
     * @example
     * // Count the number of Masjids
     * const count = await prisma.masjid.count({
     *   where: {
     *     // ... the filter for the Masjids we want to count
     *   }
     * })
    **/
    count<T extends MasjidCountArgs>(
      args?: Subset<T, MasjidCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasjidCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Masjid.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasjidAggregateArgs>(args: Subset<T, MasjidAggregateArgs>): Prisma.PrismaPromise<GetMasjidAggregateType<T>>

    /**
     * Group by Masjid.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasjidGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasjidGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasjidGroupByArgs['orderBy'] }
        : { orderBy?: MasjidGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasjidGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasjidGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Masjid model
   */
  readonly fields: MasjidFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Masjid.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasjidClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    homes<T extends Masjid$homesArgs<ExtArgs> = {}>(args?: Subset<T, Masjid$homesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Masjid model
   */ 
  interface MasjidFieldRefs {
    readonly id: FieldRef<"Masjid", 'String'>
    readonly name: FieldRef<"Masjid", 'String'>
    readonly address: FieldRef<"Masjid", 'String'>
    readonly contactInfo: FieldRef<"Masjid", 'String'>
    readonly adminId: FieldRef<"Masjid", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Masjid findUnique
   */
  export type MasjidFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * Filter, which Masjid to fetch.
     */
    where: MasjidWhereUniqueInput
  }

  /**
   * Masjid findUniqueOrThrow
   */
  export type MasjidFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * Filter, which Masjid to fetch.
     */
    where: MasjidWhereUniqueInput
  }

  /**
   * Masjid findFirst
   */
  export type MasjidFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * Filter, which Masjid to fetch.
     */
    where?: MasjidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masjids to fetch.
     */
    orderBy?: MasjidOrderByWithRelationInput | MasjidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masjids.
     */
    cursor?: MasjidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masjids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masjids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masjids.
     */
    distinct?: MasjidScalarFieldEnum | MasjidScalarFieldEnum[]
  }

  /**
   * Masjid findFirstOrThrow
   */
  export type MasjidFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * Filter, which Masjid to fetch.
     */
    where?: MasjidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masjids to fetch.
     */
    orderBy?: MasjidOrderByWithRelationInput | MasjidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masjids.
     */
    cursor?: MasjidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masjids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masjids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masjids.
     */
    distinct?: MasjidScalarFieldEnum | MasjidScalarFieldEnum[]
  }

  /**
   * Masjid findMany
   */
  export type MasjidFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * Filter, which Masjids to fetch.
     */
    where?: MasjidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masjids to fetch.
     */
    orderBy?: MasjidOrderByWithRelationInput | MasjidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Masjids.
     */
    cursor?: MasjidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masjids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masjids.
     */
    skip?: number
    distinct?: MasjidScalarFieldEnum | MasjidScalarFieldEnum[]
  }

  /**
   * Masjid create
   */
  export type MasjidCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * The data needed to create a Masjid.
     */
    data: XOR<MasjidCreateInput, MasjidUncheckedCreateInput>
  }

  /**
   * Masjid createMany
   */
  export type MasjidCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Masjids.
     */
    data: MasjidCreateManyInput | MasjidCreateManyInput[]
  }

  /**
   * Masjid update
   */
  export type MasjidUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * The data needed to update a Masjid.
     */
    data: XOR<MasjidUpdateInput, MasjidUncheckedUpdateInput>
    /**
     * Choose, which Masjid to update.
     */
    where: MasjidWhereUniqueInput
  }

  /**
   * Masjid updateMany
   */
  export type MasjidUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Masjids.
     */
    data: XOR<MasjidUpdateManyMutationInput, MasjidUncheckedUpdateManyInput>
    /**
     * Filter which Masjids to update
     */
    where?: MasjidWhereInput
  }

  /**
   * Masjid upsert
   */
  export type MasjidUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * The filter to search for the Masjid to update in case it exists.
     */
    where: MasjidWhereUniqueInput
    /**
     * In case the Masjid found by the `where` argument doesn't exist, create a new Masjid with this data.
     */
    create: XOR<MasjidCreateInput, MasjidUncheckedCreateInput>
    /**
     * In case the Masjid was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasjidUpdateInput, MasjidUncheckedUpdateInput>
  }

  /**
   * Masjid delete
   */
  export type MasjidDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
    /**
     * Filter which Masjid to delete.
     */
    where: MasjidWhereUniqueInput
  }

  /**
   * Masjid deleteMany
   */
  export type MasjidDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masjids to delete
     */
    where?: MasjidWhereInput
  }

  /**
   * Masjid findRaw
   */
  export type MasjidFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Masjid aggregateRaw
   */
  export type MasjidAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Masjid.homes
   */
  export type Masjid$homesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    where?: HomeWhereInput
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    cursor?: HomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }

  /**
   * Masjid without action
   */
  export type MasjidDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Masjid
     */
    select?: MasjidSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasjidInclude<ExtArgs> | null
  }


  /**
   * Model Home
   */

  export type AggregateHome = {
    _count: HomeCountAggregateOutputType | null
    _min: HomeMinAggregateOutputType | null
    _max: HomeMaxAggregateOutputType | null
  }

  export type HomeMinAggregateOutputType = {
    id: string | null
    address: string | null
    masjidId: string | null
    userId: string | null
  }

  export type HomeMaxAggregateOutputType = {
    id: string | null
    address: string | null
    masjidId: string | null
    userId: string | null
  }

  export type HomeCountAggregateOutputType = {
    id: number
    address: number
    masjidId: number
    userId: number
    _all: number
  }


  export type HomeMinAggregateInputType = {
    id?: true
    address?: true
    masjidId?: true
    userId?: true
  }

  export type HomeMaxAggregateInputType = {
    id?: true
    address?: true
    masjidId?: true
    userId?: true
  }

  export type HomeCountAggregateInputType = {
    id?: true
    address?: true
    masjidId?: true
    userId?: true
    _all?: true
  }

  export type HomeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Home to aggregate.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Homes
    **/
    _count?: true | HomeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HomeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HomeMaxAggregateInputType
  }

  export type GetHomeAggregateType<T extends HomeAggregateArgs> = {
        [P in keyof T & keyof AggregateHome]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHome[P]>
      : GetScalarType<T[P], AggregateHome[P]>
  }




  export type HomeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeWhereInput
    orderBy?: HomeOrderByWithAggregationInput | HomeOrderByWithAggregationInput[]
    by: HomeScalarFieldEnum[] | HomeScalarFieldEnum
    having?: HomeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HomeCountAggregateInputType | true
    _min?: HomeMinAggregateInputType
    _max?: HomeMaxAggregateInputType
  }

  export type HomeGroupByOutputType = {
    id: string
    address: string
    masjidId: string
    userId: string
    _count: HomeCountAggregateOutputType | null
    _min: HomeMinAggregateOutputType | null
    _max: HomeMaxAggregateOutputType | null
  }

  type GetHomeGroupByPayload<T extends HomeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HomeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HomeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HomeGroupByOutputType[P]>
            : GetScalarType<T[P], HomeGroupByOutputType[P]>
        }
      >
    >


  export type HomeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    masjidId?: boolean
    userId?: boolean
    masjid?: boolean | MasjidDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    mealAssignments?: boolean | Home$mealAssignmentsArgs<ExtArgs>
    swapRequests?: boolean | Home$swapRequestsArgs<ExtArgs>
    _count?: boolean | HomeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["home"]>

  export type HomeSelectScalar = {
    id?: boolean
    address?: boolean
    masjidId?: boolean
    userId?: boolean
  }


  export type HomeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masjid?: boolean | MasjidDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    mealAssignments?: boolean | Home$mealAssignmentsArgs<ExtArgs>
    swapRequests?: boolean | Home$swapRequestsArgs<ExtArgs>
    _count?: boolean | HomeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HomePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Home"
    objects: {
      masjid: Prisma.$MasjidPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      mealAssignments: Prisma.$MealAssignmentPayload<ExtArgs>[]
      swapRequests: Prisma.$SwapRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      masjidId: string
      userId: string
    }, ExtArgs["result"]["home"]>
    composites: {}
  }


  type HomeGetPayload<S extends boolean | null | undefined | HomeDefaultArgs> = $Result.GetResult<Prisma.$HomePayload, S>

  type HomeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HomeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HomeCountAggregateInputType | true
    }

  export interface HomeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Home'], meta: { name: 'Home' } }
    /**
     * Find zero or one Home that matches the filter.
     * @param {HomeFindUniqueArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HomeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HomeFindUniqueArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Home that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HomeFindUniqueOrThrowArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HomeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Home that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeFindFirstArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HomeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindFirstArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Home that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeFindFirstOrThrowArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HomeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Homes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Homes
     * const homes = await prisma.home.findMany()
     * 
     * // Get first 10 Homes
     * const homes = await prisma.home.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const homeWithIdOnly = await prisma.home.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HomeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Home.
     * @param {HomeCreateArgs} args - Arguments to create a Home.
     * @example
     * // Create one Home
     * const Home = await prisma.home.create({
     *   data: {
     *     // ... data to create a Home
     *   }
     * })
     * 
    **/
    create<T extends HomeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HomeCreateArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Homes.
     * @param {HomeCreateManyArgs} args - Arguments to create many Homes.
     * @example
     * // Create many Homes
     * const home = await prisma.home.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends HomeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Home.
     * @param {HomeDeleteArgs} args - Arguments to delete one Home.
     * @example
     * // Delete one Home
     * const Home = await prisma.home.delete({
     *   where: {
     *     // ... filter to delete one Home
     *   }
     * })
     * 
    **/
    delete<T extends HomeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HomeDeleteArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Home.
     * @param {HomeUpdateArgs} args - Arguments to update one Home.
     * @example
     * // Update one Home
     * const home = await prisma.home.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HomeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HomeUpdateArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Homes.
     * @param {HomeDeleteManyArgs} args - Arguments to filter Homes to delete.
     * @example
     * // Delete a few Homes
     * const { count } = await prisma.home.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HomeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Homes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Homes
     * const home = await prisma.home.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HomeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HomeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Home.
     * @param {HomeUpsertArgs} args - Arguments to update or create a Home.
     * @example
     * // Update or create a Home
     * const home = await prisma.home.upsert({
     *   create: {
     *     // ... data to create a Home
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Home we want to update
     *   }
     * })
    **/
    upsert<T extends HomeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HomeUpsertArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Homes that matches the filter.
     * @param {HomeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const home = await prisma.home.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: HomeFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Home.
     * @param {HomeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const home = await prisma.home.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: HomeAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Homes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeCountArgs} args - Arguments to filter Homes to count.
     * @example
     * // Count the number of Homes
     * const count = await prisma.home.count({
     *   where: {
     *     // ... the filter for the Homes we want to count
     *   }
     * })
    **/
    count<T extends HomeCountArgs>(
      args?: Subset<T, HomeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HomeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Home.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HomeAggregateArgs>(args: Subset<T, HomeAggregateArgs>): Prisma.PrismaPromise<GetHomeAggregateType<T>>

    /**
     * Group by Home.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HomeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HomeGroupByArgs['orderBy'] }
        : { orderBy?: HomeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HomeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHomeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Home model
   */
  readonly fields: HomeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Home.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HomeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    masjid<T extends MasjidDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasjidDefaultArgs<ExtArgs>>): Prisma__MasjidClient<$Result.GetResult<Prisma.$MasjidPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    mealAssignments<T extends Home$mealAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Home$mealAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    swapRequests<T extends Home$swapRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Home$swapRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Home model
   */ 
  interface HomeFieldRefs {
    readonly id: FieldRef<"Home", 'String'>
    readonly address: FieldRef<"Home", 'String'>
    readonly masjidId: FieldRef<"Home", 'String'>
    readonly userId: FieldRef<"Home", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Home findUnique
   */
  export type HomeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where: HomeWhereUniqueInput
  }

  /**
   * Home findUniqueOrThrow
   */
  export type HomeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where: HomeWhereUniqueInput
  }

  /**
   * Home findFirst
   */
  export type HomeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homes.
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homes.
     */
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }

  /**
   * Home findFirstOrThrow
   */
  export type HomeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homes.
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homes.
     */
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }

  /**
   * Home findMany
   */
  export type HomeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Homes to fetch.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Homes.
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }

  /**
   * Home create
   */
  export type HomeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * The data needed to create a Home.
     */
    data: XOR<HomeCreateInput, HomeUncheckedCreateInput>
  }

  /**
   * Home createMany
   */
  export type HomeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Homes.
     */
    data: HomeCreateManyInput | HomeCreateManyInput[]
  }

  /**
   * Home update
   */
  export type HomeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * The data needed to update a Home.
     */
    data: XOR<HomeUpdateInput, HomeUncheckedUpdateInput>
    /**
     * Choose, which Home to update.
     */
    where: HomeWhereUniqueInput
  }

  /**
   * Home updateMany
   */
  export type HomeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Homes.
     */
    data: XOR<HomeUpdateManyMutationInput, HomeUncheckedUpdateManyInput>
    /**
     * Filter which Homes to update
     */
    where?: HomeWhereInput
  }

  /**
   * Home upsert
   */
  export type HomeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * The filter to search for the Home to update in case it exists.
     */
    where: HomeWhereUniqueInput
    /**
     * In case the Home found by the `where` argument doesn't exist, create a new Home with this data.
     */
    create: XOR<HomeCreateInput, HomeUncheckedCreateInput>
    /**
     * In case the Home was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HomeUpdateInput, HomeUncheckedUpdateInput>
  }

  /**
   * Home delete
   */
  export type HomeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter which Home to delete.
     */
    where: HomeWhereUniqueInput
  }

  /**
   * Home deleteMany
   */
  export type HomeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Homes to delete
     */
    where?: HomeWhereInput
  }

  /**
   * Home findRaw
   */
  export type HomeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Home aggregateRaw
   */
  export type HomeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Home.mealAssignments
   */
  export type Home$mealAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    where?: MealAssignmentWhereInput
    orderBy?: MealAssignmentOrderByWithRelationInput | MealAssignmentOrderByWithRelationInput[]
    cursor?: MealAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealAssignmentScalarFieldEnum | MealAssignmentScalarFieldEnum[]
  }

  /**
   * Home.swapRequests
   */
  export type Home$swapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    cursor?: SwapRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * Home without action
   */
  export type HomeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeInclude<ExtArgs> | null
  }


  /**
   * Model MealAssignment
   */

  export type AggregateMealAssignment = {
    _count: MealAssignmentCountAggregateOutputType | null
    _min: MealAssignmentMinAggregateOutputType | null
    _max: MealAssignmentMaxAggregateOutputType | null
  }

  export type MealAssignmentMinAggregateOutputType = {
    id: string | null
    homeId: string | null
    mealType: $Enums.MealType | null
    date: Date | null
  }

  export type MealAssignmentMaxAggregateOutputType = {
    id: string | null
    homeId: string | null
    mealType: $Enums.MealType | null
    date: Date | null
  }

  export type MealAssignmentCountAggregateOutputType = {
    id: number
    homeId: number
    mealType: number
    date: number
    _all: number
  }


  export type MealAssignmentMinAggregateInputType = {
    id?: true
    homeId?: true
    mealType?: true
    date?: true
  }

  export type MealAssignmentMaxAggregateInputType = {
    id?: true
    homeId?: true
    mealType?: true
    date?: true
  }

  export type MealAssignmentCountAggregateInputType = {
    id?: true
    homeId?: true
    mealType?: true
    date?: true
    _all?: true
  }

  export type MealAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealAssignment to aggregate.
     */
    where?: MealAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealAssignments to fetch.
     */
    orderBy?: MealAssignmentOrderByWithRelationInput | MealAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealAssignments
    **/
    _count?: true | MealAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealAssignmentMaxAggregateInputType
  }

  export type GetMealAssignmentAggregateType<T extends MealAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateMealAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealAssignment[P]>
      : GetScalarType<T[P], AggregateMealAssignment[P]>
  }




  export type MealAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealAssignmentWhereInput
    orderBy?: MealAssignmentOrderByWithAggregationInput | MealAssignmentOrderByWithAggregationInput[]
    by: MealAssignmentScalarFieldEnum[] | MealAssignmentScalarFieldEnum
    having?: MealAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealAssignmentCountAggregateInputType | true
    _min?: MealAssignmentMinAggregateInputType
    _max?: MealAssignmentMaxAggregateInputType
  }

  export type MealAssignmentGroupByOutputType = {
    id: string
    homeId: string
    mealType: $Enums.MealType
    date: Date
    _count: MealAssignmentCountAggregateOutputType | null
    _min: MealAssignmentMinAggregateOutputType | null
    _max: MealAssignmentMaxAggregateOutputType | null
  }

  type GetMealAssignmentGroupByPayload<T extends MealAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], MealAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type MealAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeId?: boolean
    mealType?: boolean
    date?: boolean
    home?: boolean | HomeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealAssignment"]>

  export type MealAssignmentSelectScalar = {
    id?: boolean
    homeId?: boolean
    mealType?: boolean
    date?: boolean
  }


  export type MealAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home?: boolean | HomeDefaultArgs<ExtArgs>
  }


  export type $MealAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealAssignment"
    objects: {
      home: Prisma.$HomePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      homeId: string
      mealType: $Enums.MealType
      date: Date
    }, ExtArgs["result"]["mealAssignment"]>
    composites: {}
  }


  type MealAssignmentGetPayload<S extends boolean | null | undefined | MealAssignmentDefaultArgs> = $Result.GetResult<Prisma.$MealAssignmentPayload, S>

  type MealAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealAssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealAssignmentCountAggregateInputType | true
    }

  export interface MealAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealAssignment'], meta: { name: 'MealAssignment' } }
    /**
     * Find zero or one MealAssignment that matches the filter.
     * @param {MealAssignmentFindUniqueArgs} args - Arguments to find a MealAssignment
     * @example
     * // Get one MealAssignment
     * const mealAssignment = await prisma.mealAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MealAssignmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MealAssignmentFindUniqueArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MealAssignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealAssignmentFindUniqueOrThrowArgs} args - Arguments to find a MealAssignment
     * @example
     * // Get one MealAssignment
     * const mealAssignment = await prisma.mealAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MealAssignmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MealAssignmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MealAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentFindFirstArgs} args - Arguments to find a MealAssignment
     * @example
     * // Get one MealAssignment
     * const mealAssignment = await prisma.mealAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MealAssignmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MealAssignmentFindFirstArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MealAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentFindFirstOrThrowArgs} args - Arguments to find a MealAssignment
     * @example
     * // Get one MealAssignment
     * const mealAssignment = await prisma.mealAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MealAssignmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MealAssignmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MealAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealAssignments
     * const mealAssignments = await prisma.mealAssignment.findMany()
     * 
     * // Get first 10 MealAssignments
     * const mealAssignments = await prisma.mealAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealAssignmentWithIdOnly = await prisma.mealAssignment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MealAssignmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MealAssignmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MealAssignment.
     * @param {MealAssignmentCreateArgs} args - Arguments to create a MealAssignment.
     * @example
     * // Create one MealAssignment
     * const MealAssignment = await prisma.mealAssignment.create({
     *   data: {
     *     // ... data to create a MealAssignment
     *   }
     * })
     * 
    **/
    create<T extends MealAssignmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MealAssignmentCreateArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MealAssignments.
     * @param {MealAssignmentCreateManyArgs} args - Arguments to create many MealAssignments.
     * @example
     * // Create many MealAssignments
     * const mealAssignment = await prisma.mealAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MealAssignmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MealAssignmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MealAssignment.
     * @param {MealAssignmentDeleteArgs} args - Arguments to delete one MealAssignment.
     * @example
     * // Delete one MealAssignment
     * const MealAssignment = await prisma.mealAssignment.delete({
     *   where: {
     *     // ... filter to delete one MealAssignment
     *   }
     * })
     * 
    **/
    delete<T extends MealAssignmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MealAssignmentDeleteArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MealAssignment.
     * @param {MealAssignmentUpdateArgs} args - Arguments to update one MealAssignment.
     * @example
     * // Update one MealAssignment
     * const mealAssignment = await prisma.mealAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MealAssignmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MealAssignmentUpdateArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MealAssignments.
     * @param {MealAssignmentDeleteManyArgs} args - Arguments to filter MealAssignments to delete.
     * @example
     * // Delete a few MealAssignments
     * const { count } = await prisma.mealAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MealAssignmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MealAssignmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealAssignments
     * const mealAssignment = await prisma.mealAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MealAssignmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MealAssignmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealAssignment.
     * @param {MealAssignmentUpsertArgs} args - Arguments to update or create a MealAssignment.
     * @example
     * // Update or create a MealAssignment
     * const mealAssignment = await prisma.mealAssignment.upsert({
     *   create: {
     *     // ... data to create a MealAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealAssignment we want to update
     *   }
     * })
    **/
    upsert<T extends MealAssignmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MealAssignmentUpsertArgs<ExtArgs>>
    ): Prisma__MealAssignmentClient<$Result.GetResult<Prisma.$MealAssignmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more MealAssignments that matches the filter.
     * @param {MealAssignmentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const mealAssignment = await prisma.mealAssignment.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MealAssignmentFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a MealAssignment.
     * @param {MealAssignmentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const mealAssignment = await prisma.mealAssignment.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MealAssignmentAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of MealAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentCountArgs} args - Arguments to filter MealAssignments to count.
     * @example
     * // Count the number of MealAssignments
     * const count = await prisma.mealAssignment.count({
     *   where: {
     *     // ... the filter for the MealAssignments we want to count
     *   }
     * })
    **/
    count<T extends MealAssignmentCountArgs>(
      args?: Subset<T, MealAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealAssignmentAggregateArgs>(args: Subset<T, MealAssignmentAggregateArgs>): Prisma.PrismaPromise<GetMealAssignmentAggregateType<T>>

    /**
     * Group by MealAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: MealAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealAssignment model
   */
  readonly fields: MealAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    home<T extends HomeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HomeDefaultArgs<ExtArgs>>): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MealAssignment model
   */ 
  interface MealAssignmentFieldRefs {
    readonly id: FieldRef<"MealAssignment", 'String'>
    readonly homeId: FieldRef<"MealAssignment", 'String'>
    readonly mealType: FieldRef<"MealAssignment", 'MealType'>
    readonly date: FieldRef<"MealAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MealAssignment findUnique
   */
  export type MealAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MealAssignment to fetch.
     */
    where: MealAssignmentWhereUniqueInput
  }

  /**
   * MealAssignment findUniqueOrThrow
   */
  export type MealAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MealAssignment to fetch.
     */
    where: MealAssignmentWhereUniqueInput
  }

  /**
   * MealAssignment findFirst
   */
  export type MealAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MealAssignment to fetch.
     */
    where?: MealAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealAssignments to fetch.
     */
    orderBy?: MealAssignmentOrderByWithRelationInput | MealAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealAssignments.
     */
    cursor?: MealAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealAssignments.
     */
    distinct?: MealAssignmentScalarFieldEnum | MealAssignmentScalarFieldEnum[]
  }

  /**
   * MealAssignment findFirstOrThrow
   */
  export type MealAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MealAssignment to fetch.
     */
    where?: MealAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealAssignments to fetch.
     */
    orderBy?: MealAssignmentOrderByWithRelationInput | MealAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealAssignments.
     */
    cursor?: MealAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealAssignments.
     */
    distinct?: MealAssignmentScalarFieldEnum | MealAssignmentScalarFieldEnum[]
  }

  /**
   * MealAssignment findMany
   */
  export type MealAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MealAssignments to fetch.
     */
    where?: MealAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealAssignments to fetch.
     */
    orderBy?: MealAssignmentOrderByWithRelationInput | MealAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealAssignments.
     */
    cursor?: MealAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealAssignments.
     */
    skip?: number
    distinct?: MealAssignmentScalarFieldEnum | MealAssignmentScalarFieldEnum[]
  }

  /**
   * MealAssignment create
   */
  export type MealAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a MealAssignment.
     */
    data: XOR<MealAssignmentCreateInput, MealAssignmentUncheckedCreateInput>
  }

  /**
   * MealAssignment createMany
   */
  export type MealAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealAssignments.
     */
    data: MealAssignmentCreateManyInput | MealAssignmentCreateManyInput[]
  }

  /**
   * MealAssignment update
   */
  export type MealAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a MealAssignment.
     */
    data: XOR<MealAssignmentUpdateInput, MealAssignmentUncheckedUpdateInput>
    /**
     * Choose, which MealAssignment to update.
     */
    where: MealAssignmentWhereUniqueInput
  }

  /**
   * MealAssignment updateMany
   */
  export type MealAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealAssignments.
     */
    data: XOR<MealAssignmentUpdateManyMutationInput, MealAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which MealAssignments to update
     */
    where?: MealAssignmentWhereInput
  }

  /**
   * MealAssignment upsert
   */
  export type MealAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the MealAssignment to update in case it exists.
     */
    where: MealAssignmentWhereUniqueInput
    /**
     * In case the MealAssignment found by the `where` argument doesn't exist, create a new MealAssignment with this data.
     */
    create: XOR<MealAssignmentCreateInput, MealAssignmentUncheckedCreateInput>
    /**
     * In case the MealAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealAssignmentUpdateInput, MealAssignmentUncheckedUpdateInput>
  }

  /**
   * MealAssignment delete
   */
  export type MealAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
    /**
     * Filter which MealAssignment to delete.
     */
    where: MealAssignmentWhereUniqueInput
  }

  /**
   * MealAssignment deleteMany
   */
  export type MealAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealAssignments to delete
     */
    where?: MealAssignmentWhereInput
  }

  /**
   * MealAssignment findRaw
   */
  export type MealAssignmentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MealAssignment aggregateRaw
   */
  export type MealAssignmentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MealAssignment without action
   */
  export type MealAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealAssignment
     */
    select?: MealAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model SwapRequest
   */

  export type AggregateSwapRequest = {
    _count: SwapRequestCountAggregateOutputType | null
    _min: SwapRequestMinAggregateOutputType | null
    _max: SwapRequestMaxAggregateOutputType | null
  }

  export type SwapRequestMinAggregateOutputType = {
    id: string | null
    homeId: string | null
    mealType: $Enums.MealType | null
    newDate: Date | null
    status: $Enums.SwapStatus | null
    requestedBy: string | null
    approvedBy: string | null
  }

  export type SwapRequestMaxAggregateOutputType = {
    id: string | null
    homeId: string | null
    mealType: $Enums.MealType | null
    newDate: Date | null
    status: $Enums.SwapStatus | null
    requestedBy: string | null
    approvedBy: string | null
  }

  export type SwapRequestCountAggregateOutputType = {
    id: number
    homeId: number
    mealType: number
    newDate: number
    status: number
    requestedBy: number
    approvedBy: number
    _all: number
  }


  export type SwapRequestMinAggregateInputType = {
    id?: true
    homeId?: true
    mealType?: true
    newDate?: true
    status?: true
    requestedBy?: true
    approvedBy?: true
  }

  export type SwapRequestMaxAggregateInputType = {
    id?: true
    homeId?: true
    mealType?: true
    newDate?: true
    status?: true
    requestedBy?: true
    approvedBy?: true
  }

  export type SwapRequestCountAggregateInputType = {
    id?: true
    homeId?: true
    mealType?: true
    newDate?: true
    status?: true
    requestedBy?: true
    approvedBy?: true
    _all?: true
  }

  export type SwapRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwapRequest to aggregate.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SwapRequests
    **/
    _count?: true | SwapRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwapRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwapRequestMaxAggregateInputType
  }

  export type GetSwapRequestAggregateType<T extends SwapRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateSwapRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwapRequest[P]>
      : GetScalarType<T[P], AggregateSwapRequest[P]>
  }




  export type SwapRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithAggregationInput | SwapRequestOrderByWithAggregationInput[]
    by: SwapRequestScalarFieldEnum[] | SwapRequestScalarFieldEnum
    having?: SwapRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwapRequestCountAggregateInputType | true
    _min?: SwapRequestMinAggregateInputType
    _max?: SwapRequestMaxAggregateInputType
  }

  export type SwapRequestGroupByOutputType = {
    id: string
    homeId: string
    mealType: $Enums.MealType
    newDate: Date
    status: $Enums.SwapStatus
    requestedBy: string
    approvedBy: string | null
    _count: SwapRequestCountAggregateOutputType | null
    _min: SwapRequestMinAggregateOutputType | null
    _max: SwapRequestMaxAggregateOutputType | null
  }

  type GetSwapRequestGroupByPayload<T extends SwapRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SwapRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwapRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwapRequestGroupByOutputType[P]>
            : GetScalarType<T[P], SwapRequestGroupByOutputType[P]>
        }
      >
    >


  export type SwapRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeId?: boolean
    mealType?: boolean
    newDate?: boolean
    status?: boolean
    requestedBy?: boolean
    approvedBy?: boolean
    home?: boolean | HomeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swapRequest"]>

  export type SwapRequestSelectScalar = {
    id?: boolean
    homeId?: boolean
    mealType?: boolean
    newDate?: boolean
    status?: boolean
    requestedBy?: boolean
    approvedBy?: boolean
  }


  export type SwapRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home?: boolean | HomeDefaultArgs<ExtArgs>
  }


  export type $SwapRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SwapRequest"
    objects: {
      home: Prisma.$HomePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      homeId: string
      mealType: $Enums.MealType
      newDate: Date
      status: $Enums.SwapStatus
      requestedBy: string
      approvedBy: string | null
    }, ExtArgs["result"]["swapRequest"]>
    composites: {}
  }


  type SwapRequestGetPayload<S extends boolean | null | undefined | SwapRequestDefaultArgs> = $Result.GetResult<Prisma.$SwapRequestPayload, S>

  type SwapRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SwapRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SwapRequestCountAggregateInputType | true
    }

  export interface SwapRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SwapRequest'], meta: { name: 'SwapRequest' } }
    /**
     * Find zero or one SwapRequest that matches the filter.
     * @param {SwapRequestFindUniqueArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SwapRequestFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SwapRequestFindUniqueArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SwapRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SwapRequestFindUniqueOrThrowArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SwapRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SwapRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SwapRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindFirstArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SwapRequestFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SwapRequestFindFirstArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SwapRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindFirstOrThrowArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SwapRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SwapRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SwapRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SwapRequests
     * const swapRequests = await prisma.swapRequest.findMany()
     * 
     * // Get first 10 SwapRequests
     * const swapRequests = await prisma.swapRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swapRequestWithIdOnly = await prisma.swapRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SwapRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwapRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SwapRequest.
     * @param {SwapRequestCreateArgs} args - Arguments to create a SwapRequest.
     * @example
     * // Create one SwapRequest
     * const SwapRequest = await prisma.swapRequest.create({
     *   data: {
     *     // ... data to create a SwapRequest
     *   }
     * })
     * 
    **/
    create<T extends SwapRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SwapRequestCreateArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SwapRequests.
     * @param {SwapRequestCreateManyArgs} args - Arguments to create many SwapRequests.
     * @example
     * // Create many SwapRequests
     * const swapRequest = await prisma.swapRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SwapRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwapRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SwapRequest.
     * @param {SwapRequestDeleteArgs} args - Arguments to delete one SwapRequest.
     * @example
     * // Delete one SwapRequest
     * const SwapRequest = await prisma.swapRequest.delete({
     *   where: {
     *     // ... filter to delete one SwapRequest
     *   }
     * })
     * 
    **/
    delete<T extends SwapRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SwapRequestDeleteArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SwapRequest.
     * @param {SwapRequestUpdateArgs} args - Arguments to update one SwapRequest.
     * @example
     * // Update one SwapRequest
     * const swapRequest = await prisma.swapRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SwapRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SwapRequestUpdateArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SwapRequests.
     * @param {SwapRequestDeleteManyArgs} args - Arguments to filter SwapRequests to delete.
     * @example
     * // Delete a few SwapRequests
     * const { count } = await prisma.swapRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SwapRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwapRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SwapRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SwapRequests
     * const swapRequest = await prisma.swapRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SwapRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SwapRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SwapRequest.
     * @param {SwapRequestUpsertArgs} args - Arguments to update or create a SwapRequest.
     * @example
     * // Update or create a SwapRequest
     * const swapRequest = await prisma.swapRequest.upsert({
     *   create: {
     *     // ... data to create a SwapRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SwapRequest we want to update
     *   }
     * })
    **/
    upsert<T extends SwapRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SwapRequestUpsertArgs<ExtArgs>>
    ): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more SwapRequests that matches the filter.
     * @param {SwapRequestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const swapRequest = await prisma.swapRequest.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SwapRequestFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SwapRequest.
     * @param {SwapRequestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const swapRequest = await prisma.swapRequest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SwapRequestAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of SwapRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestCountArgs} args - Arguments to filter SwapRequests to count.
     * @example
     * // Count the number of SwapRequests
     * const count = await prisma.swapRequest.count({
     *   where: {
     *     // ... the filter for the SwapRequests we want to count
     *   }
     * })
    **/
    count<T extends SwapRequestCountArgs>(
      args?: Subset<T, SwapRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwapRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SwapRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwapRequestAggregateArgs>(args: Subset<T, SwapRequestAggregateArgs>): Prisma.PrismaPromise<GetSwapRequestAggregateType<T>>

    /**
     * Group by SwapRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwapRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwapRequestGroupByArgs['orderBy'] }
        : { orderBy?: SwapRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwapRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwapRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SwapRequest model
   */
  readonly fields: SwapRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SwapRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SwapRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    home<T extends HomeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HomeDefaultArgs<ExtArgs>>): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SwapRequest model
   */ 
  interface SwapRequestFieldRefs {
    readonly id: FieldRef<"SwapRequest", 'String'>
    readonly homeId: FieldRef<"SwapRequest", 'String'>
    readonly mealType: FieldRef<"SwapRequest", 'MealType'>
    readonly newDate: FieldRef<"SwapRequest", 'DateTime'>
    readonly status: FieldRef<"SwapRequest", 'SwapStatus'>
    readonly requestedBy: FieldRef<"SwapRequest", 'String'>
    readonly approvedBy: FieldRef<"SwapRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SwapRequest findUnique
   */
  export type SwapRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest findUniqueOrThrow
   */
  export type SwapRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest findFirst
   */
  export type SwapRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwapRequests.
     */
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest findFirstOrThrow
   */
  export type SwapRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwapRequests.
     */
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest findMany
   */
  export type SwapRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequests to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest create
   */
  export type SwapRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a SwapRequest.
     */
    data: XOR<SwapRequestCreateInput, SwapRequestUncheckedCreateInput>
  }

  /**
   * SwapRequest createMany
   */
  export type SwapRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SwapRequests.
     */
    data: SwapRequestCreateManyInput | SwapRequestCreateManyInput[]
  }

  /**
   * SwapRequest update
   */
  export type SwapRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a SwapRequest.
     */
    data: XOR<SwapRequestUpdateInput, SwapRequestUncheckedUpdateInput>
    /**
     * Choose, which SwapRequest to update.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest updateMany
   */
  export type SwapRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SwapRequests.
     */
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyInput>
    /**
     * Filter which SwapRequests to update
     */
    where?: SwapRequestWhereInput
  }

  /**
   * SwapRequest upsert
   */
  export type SwapRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the SwapRequest to update in case it exists.
     */
    where: SwapRequestWhereUniqueInput
    /**
     * In case the SwapRequest found by the `where` argument doesn't exist, create a new SwapRequest with this data.
     */
    create: XOR<SwapRequestCreateInput, SwapRequestUncheckedCreateInput>
    /**
     * In case the SwapRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwapRequestUpdateInput, SwapRequestUncheckedUpdateInput>
  }

  /**
   * SwapRequest delete
   */
  export type SwapRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter which SwapRequest to delete.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest deleteMany
   */
  export type SwapRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwapRequests to delete
     */
    where?: SwapRequestWhereInput
  }

  /**
   * SwapRequest findRaw
   */
  export type SwapRequestFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SwapRequest aggregateRaw
   */
  export type SwapRequestAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SwapRequest without action
   */
  export type SwapRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MasjidScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    contactInfo: 'contactInfo',
    adminId: 'adminId'
  };

  export type MasjidScalarFieldEnum = (typeof MasjidScalarFieldEnum)[keyof typeof MasjidScalarFieldEnum]


  export const HomeScalarFieldEnum: {
    id: 'id',
    address: 'address',
    masjidId: 'masjidId',
    userId: 'userId'
  };

  export type HomeScalarFieldEnum = (typeof HomeScalarFieldEnum)[keyof typeof HomeScalarFieldEnum]


  export const MealAssignmentScalarFieldEnum: {
    id: 'id',
    homeId: 'homeId',
    mealType: 'mealType',
    date: 'date'
  };

  export type MealAssignmentScalarFieldEnum = (typeof MealAssignmentScalarFieldEnum)[keyof typeof MealAssignmentScalarFieldEnum]


  export const SwapRequestScalarFieldEnum: {
    id: 'id',
    homeId: 'homeId',
    mealType: 'mealType',
    newDate: 'newDate',
    status: 'status',
    requestedBy: 'requestedBy',
    approvedBy: 'approvedBy'
  };

  export type SwapRequestScalarFieldEnum = (typeof SwapRequestScalarFieldEnum)[keyof typeof SwapRequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'MealType'
   */
  export type EnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType'>
    


  /**
   * Reference to a field of type 'MealType[]'
   */
  export type ListEnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SwapStatus'
   */
  export type EnumSwapStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SwapStatus'>
    


  /**
   * Reference to a field of type 'SwapStatus[]'
   */
  export type ListEnumSwapStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SwapStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    masjids?: MasjidListRelationFilter
    homes?: HomeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    masjids?: MasjidOrderByRelationAggregateInput
    homes?: HomeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    masjids?: MasjidListRelationFilter
    homes?: HomeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type MasjidWhereInput = {
    AND?: MasjidWhereInput | MasjidWhereInput[]
    OR?: MasjidWhereInput[]
    NOT?: MasjidWhereInput | MasjidWhereInput[]
    id?: StringFilter<"Masjid"> | string
    name?: StringFilter<"Masjid"> | string
    address?: StringFilter<"Masjid"> | string
    contactInfo?: StringFilter<"Masjid"> | string
    adminId?: StringFilter<"Masjid"> | string
    admin?: XOR<UserRelationFilter, UserWhereInput>
    homes?: HomeListRelationFilter
  }

  export type MasjidOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactInfo?: SortOrder
    adminId?: SortOrder
    admin?: UserOrderByWithRelationInput
    homes?: HomeOrderByRelationAggregateInput
  }

  export type MasjidWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasjidWhereInput | MasjidWhereInput[]
    OR?: MasjidWhereInput[]
    NOT?: MasjidWhereInput | MasjidWhereInput[]
    name?: StringFilter<"Masjid"> | string
    address?: StringFilter<"Masjid"> | string
    contactInfo?: StringFilter<"Masjid"> | string
    adminId?: StringFilter<"Masjid"> | string
    admin?: XOR<UserRelationFilter, UserWhereInput>
    homes?: HomeListRelationFilter
  }, "id">

  export type MasjidOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactInfo?: SortOrder
    adminId?: SortOrder
    _count?: MasjidCountOrderByAggregateInput
    _max?: MasjidMaxOrderByAggregateInput
    _min?: MasjidMinOrderByAggregateInput
  }

  export type MasjidScalarWhereWithAggregatesInput = {
    AND?: MasjidScalarWhereWithAggregatesInput | MasjidScalarWhereWithAggregatesInput[]
    OR?: MasjidScalarWhereWithAggregatesInput[]
    NOT?: MasjidScalarWhereWithAggregatesInput | MasjidScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Masjid"> | string
    name?: StringWithAggregatesFilter<"Masjid"> | string
    address?: StringWithAggregatesFilter<"Masjid"> | string
    contactInfo?: StringWithAggregatesFilter<"Masjid"> | string
    adminId?: StringWithAggregatesFilter<"Masjid"> | string
  }

  export type HomeWhereInput = {
    AND?: HomeWhereInput | HomeWhereInput[]
    OR?: HomeWhereInput[]
    NOT?: HomeWhereInput | HomeWhereInput[]
    id?: StringFilter<"Home"> | string
    address?: StringFilter<"Home"> | string
    masjidId?: StringFilter<"Home"> | string
    userId?: StringFilter<"Home"> | string
    masjid?: XOR<MasjidRelationFilter, MasjidWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    mealAssignments?: MealAssignmentListRelationFilter
    swapRequests?: SwapRequestListRelationFilter
  }

  export type HomeOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    masjidId?: SortOrder
    userId?: SortOrder
    masjid?: MasjidOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    mealAssignments?: MealAssignmentOrderByRelationAggregateInput
    swapRequests?: SwapRequestOrderByRelationAggregateInput
  }

  export type HomeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HomeWhereInput | HomeWhereInput[]
    OR?: HomeWhereInput[]
    NOT?: HomeWhereInput | HomeWhereInput[]
    address?: StringFilter<"Home"> | string
    masjidId?: StringFilter<"Home"> | string
    userId?: StringFilter<"Home"> | string
    masjid?: XOR<MasjidRelationFilter, MasjidWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    mealAssignments?: MealAssignmentListRelationFilter
    swapRequests?: SwapRequestListRelationFilter
  }, "id">

  export type HomeOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    masjidId?: SortOrder
    userId?: SortOrder
    _count?: HomeCountOrderByAggregateInput
    _max?: HomeMaxOrderByAggregateInput
    _min?: HomeMinOrderByAggregateInput
  }

  export type HomeScalarWhereWithAggregatesInput = {
    AND?: HomeScalarWhereWithAggregatesInput | HomeScalarWhereWithAggregatesInput[]
    OR?: HomeScalarWhereWithAggregatesInput[]
    NOT?: HomeScalarWhereWithAggregatesInput | HomeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Home"> | string
    address?: StringWithAggregatesFilter<"Home"> | string
    masjidId?: StringWithAggregatesFilter<"Home"> | string
    userId?: StringWithAggregatesFilter<"Home"> | string
  }

  export type MealAssignmentWhereInput = {
    AND?: MealAssignmentWhereInput | MealAssignmentWhereInput[]
    OR?: MealAssignmentWhereInput[]
    NOT?: MealAssignmentWhereInput | MealAssignmentWhereInput[]
    id?: StringFilter<"MealAssignment"> | string
    homeId?: StringFilter<"MealAssignment"> | string
    mealType?: EnumMealTypeFilter<"MealAssignment"> | $Enums.MealType
    date?: DateTimeFilter<"MealAssignment"> | Date | string
    home?: XOR<HomeRelationFilter, HomeWhereInput>
  }

  export type MealAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    date?: SortOrder
    home?: HomeOrderByWithRelationInput
  }

  export type MealAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MealAssignmentWhereInput | MealAssignmentWhereInput[]
    OR?: MealAssignmentWhereInput[]
    NOT?: MealAssignmentWhereInput | MealAssignmentWhereInput[]
    homeId?: StringFilter<"MealAssignment"> | string
    mealType?: EnumMealTypeFilter<"MealAssignment"> | $Enums.MealType
    date?: DateTimeFilter<"MealAssignment"> | Date | string
    home?: XOR<HomeRelationFilter, HomeWhereInput>
  }, "id">

  export type MealAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    date?: SortOrder
    _count?: MealAssignmentCountOrderByAggregateInput
    _max?: MealAssignmentMaxOrderByAggregateInput
    _min?: MealAssignmentMinOrderByAggregateInput
  }

  export type MealAssignmentScalarWhereWithAggregatesInput = {
    AND?: MealAssignmentScalarWhereWithAggregatesInput | MealAssignmentScalarWhereWithAggregatesInput[]
    OR?: MealAssignmentScalarWhereWithAggregatesInput[]
    NOT?: MealAssignmentScalarWhereWithAggregatesInput | MealAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealAssignment"> | string
    homeId?: StringWithAggregatesFilter<"MealAssignment"> | string
    mealType?: EnumMealTypeWithAggregatesFilter<"MealAssignment"> | $Enums.MealType
    date?: DateTimeWithAggregatesFilter<"MealAssignment"> | Date | string
  }

  export type SwapRequestWhereInput = {
    AND?: SwapRequestWhereInput | SwapRequestWhereInput[]
    OR?: SwapRequestWhereInput[]
    NOT?: SwapRequestWhereInput | SwapRequestWhereInput[]
    id?: StringFilter<"SwapRequest"> | string
    homeId?: StringFilter<"SwapRequest"> | string
    mealType?: EnumMealTypeFilter<"SwapRequest"> | $Enums.MealType
    newDate?: DateTimeFilter<"SwapRequest"> | Date | string
    status?: EnumSwapStatusFilter<"SwapRequest"> | $Enums.SwapStatus
    requestedBy?: StringFilter<"SwapRequest"> | string
    approvedBy?: StringNullableFilter<"SwapRequest"> | string | null
    home?: XOR<HomeRelationFilter, HomeWhereInput>
  }

  export type SwapRequestOrderByWithRelationInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    newDate?: SortOrder
    status?: SortOrder
    requestedBy?: SortOrder
    approvedBy?: SortOrder
    home?: HomeOrderByWithRelationInput
  }

  export type SwapRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SwapRequestWhereInput | SwapRequestWhereInput[]
    OR?: SwapRequestWhereInput[]
    NOT?: SwapRequestWhereInput | SwapRequestWhereInput[]
    homeId?: StringFilter<"SwapRequest"> | string
    mealType?: EnumMealTypeFilter<"SwapRequest"> | $Enums.MealType
    newDate?: DateTimeFilter<"SwapRequest"> | Date | string
    status?: EnumSwapStatusFilter<"SwapRequest"> | $Enums.SwapStatus
    requestedBy?: StringFilter<"SwapRequest"> | string
    approvedBy?: StringNullableFilter<"SwapRequest"> | string | null
    home?: XOR<HomeRelationFilter, HomeWhereInput>
  }, "id">

  export type SwapRequestOrderByWithAggregationInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    newDate?: SortOrder
    status?: SortOrder
    requestedBy?: SortOrder
    approvedBy?: SortOrder
    _count?: SwapRequestCountOrderByAggregateInput
    _max?: SwapRequestMaxOrderByAggregateInput
    _min?: SwapRequestMinOrderByAggregateInput
  }

  export type SwapRequestScalarWhereWithAggregatesInput = {
    AND?: SwapRequestScalarWhereWithAggregatesInput | SwapRequestScalarWhereWithAggregatesInput[]
    OR?: SwapRequestScalarWhereWithAggregatesInput[]
    NOT?: SwapRequestScalarWhereWithAggregatesInput | SwapRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SwapRequest"> | string
    homeId?: StringWithAggregatesFilter<"SwapRequest"> | string
    mealType?: EnumMealTypeWithAggregatesFilter<"SwapRequest"> | $Enums.MealType
    newDate?: DateTimeWithAggregatesFilter<"SwapRequest"> | Date | string
    status?: EnumSwapStatusWithAggregatesFilter<"SwapRequest"> | $Enums.SwapStatus
    requestedBy?: StringWithAggregatesFilter<"SwapRequest"> | string
    approvedBy?: StringNullableWithAggregatesFilter<"SwapRequest"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
    masjids?: MasjidCreateNestedManyWithoutAdminInput
    homes?: HomeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
    masjids?: MasjidUncheckedCreateNestedManyWithoutAdminInput
    homes?: HomeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    masjids?: MasjidUpdateManyWithoutAdminNestedInput
    homes?: HomeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    masjids?: MasjidUncheckedUpdateManyWithoutAdminNestedInput
    homes?: HomeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type MasjidCreateInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    admin: UserCreateNestedOneWithoutMasjidsInput
    homes?: HomeCreateNestedManyWithoutMasjidInput
  }

  export type MasjidUncheckedCreateInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    adminId: string
    homes?: HomeUncheckedCreateNestedManyWithoutMasjidInput
  }

  export type MasjidUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutMasjidsNestedInput
    homes?: HomeUpdateManyWithoutMasjidNestedInput
  }

  export type MasjidUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    homes?: HomeUncheckedUpdateManyWithoutMasjidNestedInput
  }

  export type MasjidCreateManyInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    adminId: string
  }

  export type MasjidUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
  }

  export type MasjidUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type HomeCreateInput = {
    id?: string
    address: string
    masjid: MasjidCreateNestedOneWithoutHomesInput
    user: UserCreateNestedOneWithoutHomesInput
    mealAssignments?: MealAssignmentCreateNestedManyWithoutHomeInput
    swapRequests?: SwapRequestCreateNestedManyWithoutHomeInput
  }

  export type HomeUncheckedCreateInput = {
    id?: string
    address: string
    masjidId: string
    userId: string
    mealAssignments?: MealAssignmentUncheckedCreateNestedManyWithoutHomeInput
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutHomeInput
  }

  export type HomeUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjid?: MasjidUpdateOneRequiredWithoutHomesNestedInput
    user?: UserUpdateOneRequiredWithoutHomesNestedInput
    mealAssignments?: MealAssignmentUpdateManyWithoutHomeNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjidId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mealAssignments?: MealAssignmentUncheckedUpdateManyWithoutHomeNestedInput
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutHomeNestedInput
  }

  export type HomeCreateManyInput = {
    id?: string
    address: string
    masjidId: string
    userId: string
  }

  export type HomeUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
  }

  export type HomeUncheckedUpdateManyInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjidId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MealAssignmentCreateInput = {
    id?: string
    mealType: $Enums.MealType
    date: Date | string
    home: HomeCreateNestedOneWithoutMealAssignmentsInput
  }

  export type MealAssignmentUncheckedCreateInput = {
    id?: string
    homeId: string
    mealType: $Enums.MealType
    date: Date | string
  }

  export type MealAssignmentUpdateInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    home?: HomeUpdateOneRequiredWithoutMealAssignmentsNestedInput
  }

  export type MealAssignmentUncheckedUpdateInput = {
    homeId?: StringFieldUpdateOperationsInput | string
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealAssignmentCreateManyInput = {
    id?: string
    homeId: string
    mealType: $Enums.MealType
    date: Date | string
  }

  export type MealAssignmentUpdateManyMutationInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealAssignmentUncheckedUpdateManyInput = {
    homeId?: StringFieldUpdateOperationsInput | string
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestCreateInput = {
    id?: string
    mealType: $Enums.MealType
    newDate: Date | string
    status?: $Enums.SwapStatus
    requestedBy: string
    approvedBy?: string | null
    home: HomeCreateNestedOneWithoutSwapRequestsInput
  }

  export type SwapRequestUncheckedCreateInput = {
    id?: string
    homeId: string
    mealType: $Enums.MealType
    newDate: Date | string
    status?: $Enums.SwapStatus
    requestedBy: string
    approvedBy?: string | null
  }

  export type SwapRequestUpdateInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    home?: HomeUpdateOneRequiredWithoutSwapRequestsNestedInput
  }

  export type SwapRequestUncheckedUpdateInput = {
    homeId?: StringFieldUpdateOperationsInput | string
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SwapRequestCreateManyInput = {
    id?: string
    homeId: string
    mealType: $Enums.MealType
    newDate: Date | string
    status?: $Enums.SwapStatus
    requestedBy: string
    approvedBy?: string | null
  }

  export type SwapRequestUpdateManyMutationInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SwapRequestUncheckedUpdateManyInput = {
    homeId?: StringFieldUpdateOperationsInput | string
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type MasjidListRelationFilter = {
    every?: MasjidWhereInput
    some?: MasjidWhereInput
    none?: MasjidWhereInput
  }

  export type HomeListRelationFilter = {
    every?: HomeWhereInput
    some?: HomeWhereInput
    none?: HomeWhereInput
  }

  export type MasjidOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HomeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MasjidCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactInfo?: SortOrder
    adminId?: SortOrder
  }

  export type MasjidMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactInfo?: SortOrder
    adminId?: SortOrder
  }

  export type MasjidMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contactInfo?: SortOrder
    adminId?: SortOrder
  }

  export type MasjidRelationFilter = {
    is?: MasjidWhereInput
    isNot?: MasjidWhereInput
  }

  export type MealAssignmentListRelationFilter = {
    every?: MealAssignmentWhereInput
    some?: MealAssignmentWhereInput
    none?: MealAssignmentWhereInput
  }

  export type SwapRequestListRelationFilter = {
    every?: SwapRequestWhereInput
    some?: SwapRequestWhereInput
    none?: SwapRequestWhereInput
  }

  export type MealAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwapRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HomeCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    masjidId?: SortOrder
    userId?: SortOrder
  }

  export type HomeMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    masjidId?: SortOrder
    userId?: SortOrder
  }

  export type HomeMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    masjidId?: SortOrder
    userId?: SortOrder
  }

  export type EnumMealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeFilter<$PrismaModel> | $Enums.MealType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HomeRelationFilter = {
    is?: HomeWhereInput
    isNot?: HomeWhereInput
  }

  export type MealAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    date?: SortOrder
  }

  export type MealAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    date?: SortOrder
  }

  export type MealAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    date?: SortOrder
  }

  export type EnumMealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeWithAggregatesFilter<$PrismaModel> | $Enums.MealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealTypeFilter<$PrismaModel>
    _max?: NestedEnumMealTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumSwapStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapStatus | EnumSwapStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapStatusFilter<$PrismaModel> | $Enums.SwapStatus
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type SwapRequestCountOrderByAggregateInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    newDate?: SortOrder
    status?: SortOrder
    requestedBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type SwapRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    newDate?: SortOrder
    status?: SortOrder
    requestedBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type SwapRequestMinOrderByAggregateInput = {
    id?: SortOrder
    homeId?: SortOrder
    mealType?: SortOrder
    newDate?: SortOrder
    status?: SortOrder
    requestedBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type EnumSwapStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapStatus | EnumSwapStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapStatusWithAggregatesFilter<$PrismaModel> | $Enums.SwapStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSwapStatusFilter<$PrismaModel>
    _max?: NestedEnumSwapStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type MasjidCreateNestedManyWithoutAdminInput = {
    create?: XOR<MasjidCreateWithoutAdminInput, MasjidUncheckedCreateWithoutAdminInput> | MasjidCreateWithoutAdminInput[] | MasjidUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: MasjidCreateOrConnectWithoutAdminInput | MasjidCreateOrConnectWithoutAdminInput[]
    createMany?: MasjidCreateManyAdminInputEnvelope
    connect?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
  }

  export type HomeCreateNestedManyWithoutUserInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput> | HomeCreateWithoutUserInput[] | HomeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput | HomeCreateOrConnectWithoutUserInput[]
    createMany?: HomeCreateManyUserInputEnvelope
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
  }

  export type MasjidUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<MasjidCreateWithoutAdminInput, MasjidUncheckedCreateWithoutAdminInput> | MasjidCreateWithoutAdminInput[] | MasjidUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: MasjidCreateOrConnectWithoutAdminInput | MasjidCreateOrConnectWithoutAdminInput[]
    createMany?: MasjidCreateManyAdminInputEnvelope
    connect?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
  }

  export type HomeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput> | HomeCreateWithoutUserInput[] | HomeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput | HomeCreateOrConnectWithoutUserInput[]
    createMany?: HomeCreateManyUserInputEnvelope
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type MasjidUpdateManyWithoutAdminNestedInput = {
    create?: XOR<MasjidCreateWithoutAdminInput, MasjidUncheckedCreateWithoutAdminInput> | MasjidCreateWithoutAdminInput[] | MasjidUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: MasjidCreateOrConnectWithoutAdminInput | MasjidCreateOrConnectWithoutAdminInput[]
    upsert?: MasjidUpsertWithWhereUniqueWithoutAdminInput | MasjidUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: MasjidCreateManyAdminInputEnvelope
    set?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    disconnect?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    delete?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    connect?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    update?: MasjidUpdateWithWhereUniqueWithoutAdminInput | MasjidUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: MasjidUpdateManyWithWhereWithoutAdminInput | MasjidUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: MasjidScalarWhereInput | MasjidScalarWhereInput[]
  }

  export type HomeUpdateManyWithoutUserNestedInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput> | HomeCreateWithoutUserInput[] | HomeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput | HomeCreateOrConnectWithoutUserInput[]
    upsert?: HomeUpsertWithWhereUniqueWithoutUserInput | HomeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HomeCreateManyUserInputEnvelope
    set?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    disconnect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    delete?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    update?: HomeUpdateWithWhereUniqueWithoutUserInput | HomeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HomeUpdateManyWithWhereWithoutUserInput | HomeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HomeScalarWhereInput | HomeScalarWhereInput[]
  }

  export type MasjidUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<MasjidCreateWithoutAdminInput, MasjidUncheckedCreateWithoutAdminInput> | MasjidCreateWithoutAdminInput[] | MasjidUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: MasjidCreateOrConnectWithoutAdminInput | MasjidCreateOrConnectWithoutAdminInput[]
    upsert?: MasjidUpsertWithWhereUniqueWithoutAdminInput | MasjidUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: MasjidCreateManyAdminInputEnvelope
    set?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    disconnect?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    delete?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    connect?: MasjidWhereUniqueInput | MasjidWhereUniqueInput[]
    update?: MasjidUpdateWithWhereUniqueWithoutAdminInput | MasjidUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: MasjidUpdateManyWithWhereWithoutAdminInput | MasjidUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: MasjidScalarWhereInput | MasjidScalarWhereInput[]
  }

  export type HomeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput> | HomeCreateWithoutUserInput[] | HomeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput | HomeCreateOrConnectWithoutUserInput[]
    upsert?: HomeUpsertWithWhereUniqueWithoutUserInput | HomeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HomeCreateManyUserInputEnvelope
    set?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    disconnect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    delete?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    update?: HomeUpdateWithWhereUniqueWithoutUserInput | HomeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HomeUpdateManyWithWhereWithoutUserInput | HomeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HomeScalarWhereInput | HomeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMasjidsInput = {
    create?: XOR<UserCreateWithoutMasjidsInput, UserUncheckedCreateWithoutMasjidsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMasjidsInput
    connect?: UserWhereUniqueInput
  }

  export type HomeCreateNestedManyWithoutMasjidInput = {
    create?: XOR<HomeCreateWithoutMasjidInput, HomeUncheckedCreateWithoutMasjidInput> | HomeCreateWithoutMasjidInput[] | HomeUncheckedCreateWithoutMasjidInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutMasjidInput | HomeCreateOrConnectWithoutMasjidInput[]
    createMany?: HomeCreateManyMasjidInputEnvelope
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
  }

  export type HomeUncheckedCreateNestedManyWithoutMasjidInput = {
    create?: XOR<HomeCreateWithoutMasjidInput, HomeUncheckedCreateWithoutMasjidInput> | HomeCreateWithoutMasjidInput[] | HomeUncheckedCreateWithoutMasjidInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutMasjidInput | HomeCreateOrConnectWithoutMasjidInput[]
    createMany?: HomeCreateManyMasjidInputEnvelope
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMasjidsNestedInput = {
    create?: XOR<UserCreateWithoutMasjidsInput, UserUncheckedCreateWithoutMasjidsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMasjidsInput
    upsert?: UserUpsertWithoutMasjidsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMasjidsInput, UserUpdateWithoutMasjidsInput>, UserUncheckedUpdateWithoutMasjidsInput>
  }

  export type HomeUpdateManyWithoutMasjidNestedInput = {
    create?: XOR<HomeCreateWithoutMasjidInput, HomeUncheckedCreateWithoutMasjidInput> | HomeCreateWithoutMasjidInput[] | HomeUncheckedCreateWithoutMasjidInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutMasjidInput | HomeCreateOrConnectWithoutMasjidInput[]
    upsert?: HomeUpsertWithWhereUniqueWithoutMasjidInput | HomeUpsertWithWhereUniqueWithoutMasjidInput[]
    createMany?: HomeCreateManyMasjidInputEnvelope
    set?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    disconnect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    delete?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    update?: HomeUpdateWithWhereUniqueWithoutMasjidInput | HomeUpdateWithWhereUniqueWithoutMasjidInput[]
    updateMany?: HomeUpdateManyWithWhereWithoutMasjidInput | HomeUpdateManyWithWhereWithoutMasjidInput[]
    deleteMany?: HomeScalarWhereInput | HomeScalarWhereInput[]
  }

  export type HomeUncheckedUpdateManyWithoutMasjidNestedInput = {
    create?: XOR<HomeCreateWithoutMasjidInput, HomeUncheckedCreateWithoutMasjidInput> | HomeCreateWithoutMasjidInput[] | HomeUncheckedCreateWithoutMasjidInput[]
    connectOrCreate?: HomeCreateOrConnectWithoutMasjidInput | HomeCreateOrConnectWithoutMasjidInput[]
    upsert?: HomeUpsertWithWhereUniqueWithoutMasjidInput | HomeUpsertWithWhereUniqueWithoutMasjidInput[]
    createMany?: HomeCreateManyMasjidInputEnvelope
    set?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    disconnect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    delete?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    connect?: HomeWhereUniqueInput | HomeWhereUniqueInput[]
    update?: HomeUpdateWithWhereUniqueWithoutMasjidInput | HomeUpdateWithWhereUniqueWithoutMasjidInput[]
    updateMany?: HomeUpdateManyWithWhereWithoutMasjidInput | HomeUpdateManyWithWhereWithoutMasjidInput[]
    deleteMany?: HomeScalarWhereInput | HomeScalarWhereInput[]
  }

  export type MasjidCreateNestedOneWithoutHomesInput = {
    create?: XOR<MasjidCreateWithoutHomesInput, MasjidUncheckedCreateWithoutHomesInput>
    connectOrCreate?: MasjidCreateOrConnectWithoutHomesInput
    connect?: MasjidWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHomesInput = {
    create?: XOR<UserCreateWithoutHomesInput, UserUncheckedCreateWithoutHomesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomesInput
    connect?: UserWhereUniqueInput
  }

  export type MealAssignmentCreateNestedManyWithoutHomeInput = {
    create?: XOR<MealAssignmentCreateWithoutHomeInput, MealAssignmentUncheckedCreateWithoutHomeInput> | MealAssignmentCreateWithoutHomeInput[] | MealAssignmentUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: MealAssignmentCreateOrConnectWithoutHomeInput | MealAssignmentCreateOrConnectWithoutHomeInput[]
    createMany?: MealAssignmentCreateManyHomeInputEnvelope
    connect?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
  }

  export type SwapRequestCreateNestedManyWithoutHomeInput = {
    create?: XOR<SwapRequestCreateWithoutHomeInput, SwapRequestUncheckedCreateWithoutHomeInput> | SwapRequestCreateWithoutHomeInput[] | SwapRequestUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutHomeInput | SwapRequestCreateOrConnectWithoutHomeInput[]
    createMany?: SwapRequestCreateManyHomeInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type MealAssignmentUncheckedCreateNestedManyWithoutHomeInput = {
    create?: XOR<MealAssignmentCreateWithoutHomeInput, MealAssignmentUncheckedCreateWithoutHomeInput> | MealAssignmentCreateWithoutHomeInput[] | MealAssignmentUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: MealAssignmentCreateOrConnectWithoutHomeInput | MealAssignmentCreateOrConnectWithoutHomeInput[]
    createMany?: MealAssignmentCreateManyHomeInputEnvelope
    connect?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
  }

  export type SwapRequestUncheckedCreateNestedManyWithoutHomeInput = {
    create?: XOR<SwapRequestCreateWithoutHomeInput, SwapRequestUncheckedCreateWithoutHomeInput> | SwapRequestCreateWithoutHomeInput[] | SwapRequestUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutHomeInput | SwapRequestCreateOrConnectWithoutHomeInput[]
    createMany?: SwapRequestCreateManyHomeInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type MasjidUpdateOneRequiredWithoutHomesNestedInput = {
    create?: XOR<MasjidCreateWithoutHomesInput, MasjidUncheckedCreateWithoutHomesInput>
    connectOrCreate?: MasjidCreateOrConnectWithoutHomesInput
    upsert?: MasjidUpsertWithoutHomesInput
    connect?: MasjidWhereUniqueInput
    update?: XOR<XOR<MasjidUpdateToOneWithWhereWithoutHomesInput, MasjidUpdateWithoutHomesInput>, MasjidUncheckedUpdateWithoutHomesInput>
  }

  export type UserUpdateOneRequiredWithoutHomesNestedInput = {
    create?: XOR<UserCreateWithoutHomesInput, UserUncheckedCreateWithoutHomesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomesInput
    upsert?: UserUpsertWithoutHomesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHomesInput, UserUpdateWithoutHomesInput>, UserUncheckedUpdateWithoutHomesInput>
  }

  export type MealAssignmentUpdateManyWithoutHomeNestedInput = {
    create?: XOR<MealAssignmentCreateWithoutHomeInput, MealAssignmentUncheckedCreateWithoutHomeInput> | MealAssignmentCreateWithoutHomeInput[] | MealAssignmentUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: MealAssignmentCreateOrConnectWithoutHomeInput | MealAssignmentCreateOrConnectWithoutHomeInput[]
    upsert?: MealAssignmentUpsertWithWhereUniqueWithoutHomeInput | MealAssignmentUpsertWithWhereUniqueWithoutHomeInput[]
    createMany?: MealAssignmentCreateManyHomeInputEnvelope
    set?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    disconnect?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    delete?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    connect?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    update?: MealAssignmentUpdateWithWhereUniqueWithoutHomeInput | MealAssignmentUpdateWithWhereUniqueWithoutHomeInput[]
    updateMany?: MealAssignmentUpdateManyWithWhereWithoutHomeInput | MealAssignmentUpdateManyWithWhereWithoutHomeInput[]
    deleteMany?: MealAssignmentScalarWhereInput | MealAssignmentScalarWhereInput[]
  }

  export type SwapRequestUpdateManyWithoutHomeNestedInput = {
    create?: XOR<SwapRequestCreateWithoutHomeInput, SwapRequestUncheckedCreateWithoutHomeInput> | SwapRequestCreateWithoutHomeInput[] | SwapRequestUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutHomeInput | SwapRequestCreateOrConnectWithoutHomeInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutHomeInput | SwapRequestUpsertWithWhereUniqueWithoutHomeInput[]
    createMany?: SwapRequestCreateManyHomeInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutHomeInput | SwapRequestUpdateWithWhereUniqueWithoutHomeInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutHomeInput | SwapRequestUpdateManyWithWhereWithoutHomeInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type MealAssignmentUncheckedUpdateManyWithoutHomeNestedInput = {
    create?: XOR<MealAssignmentCreateWithoutHomeInput, MealAssignmentUncheckedCreateWithoutHomeInput> | MealAssignmentCreateWithoutHomeInput[] | MealAssignmentUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: MealAssignmentCreateOrConnectWithoutHomeInput | MealAssignmentCreateOrConnectWithoutHomeInput[]
    upsert?: MealAssignmentUpsertWithWhereUniqueWithoutHomeInput | MealAssignmentUpsertWithWhereUniqueWithoutHomeInput[]
    createMany?: MealAssignmentCreateManyHomeInputEnvelope
    set?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    disconnect?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    delete?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    connect?: MealAssignmentWhereUniqueInput | MealAssignmentWhereUniqueInput[]
    update?: MealAssignmentUpdateWithWhereUniqueWithoutHomeInput | MealAssignmentUpdateWithWhereUniqueWithoutHomeInput[]
    updateMany?: MealAssignmentUpdateManyWithWhereWithoutHomeInput | MealAssignmentUpdateManyWithWhereWithoutHomeInput[]
    deleteMany?: MealAssignmentScalarWhereInput | MealAssignmentScalarWhereInput[]
  }

  export type SwapRequestUncheckedUpdateManyWithoutHomeNestedInput = {
    create?: XOR<SwapRequestCreateWithoutHomeInput, SwapRequestUncheckedCreateWithoutHomeInput> | SwapRequestCreateWithoutHomeInput[] | SwapRequestUncheckedCreateWithoutHomeInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutHomeInput | SwapRequestCreateOrConnectWithoutHomeInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutHomeInput | SwapRequestUpsertWithWhereUniqueWithoutHomeInput[]
    createMany?: SwapRequestCreateManyHomeInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutHomeInput | SwapRequestUpdateWithWhereUniqueWithoutHomeInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutHomeInput | SwapRequestUpdateManyWithWhereWithoutHomeInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type HomeCreateNestedOneWithoutMealAssignmentsInput = {
    create?: XOR<HomeCreateWithoutMealAssignmentsInput, HomeUncheckedCreateWithoutMealAssignmentsInput>
    connectOrCreate?: HomeCreateOrConnectWithoutMealAssignmentsInput
    connect?: HomeWhereUniqueInput
  }

  export type EnumMealTypeFieldUpdateOperationsInput = {
    set?: $Enums.MealType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HomeUpdateOneRequiredWithoutMealAssignmentsNestedInput = {
    create?: XOR<HomeCreateWithoutMealAssignmentsInput, HomeUncheckedCreateWithoutMealAssignmentsInput>
    connectOrCreate?: HomeCreateOrConnectWithoutMealAssignmentsInput
    upsert?: HomeUpsertWithoutMealAssignmentsInput
    connect?: HomeWhereUniqueInput
    update?: XOR<XOR<HomeUpdateToOneWithWhereWithoutMealAssignmentsInput, HomeUpdateWithoutMealAssignmentsInput>, HomeUncheckedUpdateWithoutMealAssignmentsInput>
  }

  export type HomeCreateNestedOneWithoutSwapRequestsInput = {
    create?: XOR<HomeCreateWithoutSwapRequestsInput, HomeUncheckedCreateWithoutSwapRequestsInput>
    connectOrCreate?: HomeCreateOrConnectWithoutSwapRequestsInput
    connect?: HomeWhereUniqueInput
  }

  export type EnumSwapStatusFieldUpdateOperationsInput = {
    set?: $Enums.SwapStatus
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type HomeUpdateOneRequiredWithoutSwapRequestsNestedInput = {
    create?: XOR<HomeCreateWithoutSwapRequestsInput, HomeUncheckedCreateWithoutSwapRequestsInput>
    connectOrCreate?: HomeCreateOrConnectWithoutSwapRequestsInput
    upsert?: HomeUpsertWithoutSwapRequestsInput
    connect?: HomeWhereUniqueInput
    update?: XOR<XOR<HomeUpdateToOneWithWhereWithoutSwapRequestsInput, HomeUpdateWithoutSwapRequestsInput>, HomeUncheckedUpdateWithoutSwapRequestsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumMealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeFilter<$PrismaModel> | $Enums.MealType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumMealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeWithAggregatesFilter<$PrismaModel> | $Enums.MealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealTypeFilter<$PrismaModel>
    _max?: NestedEnumMealTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSwapStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapStatus | EnumSwapStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapStatusFilter<$PrismaModel> | $Enums.SwapStatus
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedEnumSwapStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapStatus | EnumSwapStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapStatus[] | ListEnumSwapStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapStatusWithAggregatesFilter<$PrismaModel> | $Enums.SwapStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSwapStatusFilter<$PrismaModel>
    _max?: NestedEnumSwapStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type MasjidCreateWithoutAdminInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    homes?: HomeCreateNestedManyWithoutMasjidInput
  }

  export type MasjidUncheckedCreateWithoutAdminInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    homes?: HomeUncheckedCreateNestedManyWithoutMasjidInput
  }

  export type MasjidCreateOrConnectWithoutAdminInput = {
    where: MasjidWhereUniqueInput
    create: XOR<MasjidCreateWithoutAdminInput, MasjidUncheckedCreateWithoutAdminInput>
  }

  export type MasjidCreateManyAdminInputEnvelope = {
    data: MasjidCreateManyAdminInput | MasjidCreateManyAdminInput[]
  }

  export type HomeCreateWithoutUserInput = {
    id?: string
    address: string
    masjid: MasjidCreateNestedOneWithoutHomesInput
    mealAssignments?: MealAssignmentCreateNestedManyWithoutHomeInput
    swapRequests?: SwapRequestCreateNestedManyWithoutHomeInput
  }

  export type HomeUncheckedCreateWithoutUserInput = {
    id?: string
    address: string
    masjidId: string
    mealAssignments?: MealAssignmentUncheckedCreateNestedManyWithoutHomeInput
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutHomeInput
  }

  export type HomeCreateOrConnectWithoutUserInput = {
    where: HomeWhereUniqueInput
    create: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
  }

  export type HomeCreateManyUserInputEnvelope = {
    data: HomeCreateManyUserInput | HomeCreateManyUserInput[]
  }

  export type MasjidUpsertWithWhereUniqueWithoutAdminInput = {
    where: MasjidWhereUniqueInput
    update: XOR<MasjidUpdateWithoutAdminInput, MasjidUncheckedUpdateWithoutAdminInput>
    create: XOR<MasjidCreateWithoutAdminInput, MasjidUncheckedCreateWithoutAdminInput>
  }

  export type MasjidUpdateWithWhereUniqueWithoutAdminInput = {
    where: MasjidWhereUniqueInput
    data: XOR<MasjidUpdateWithoutAdminInput, MasjidUncheckedUpdateWithoutAdminInput>
  }

  export type MasjidUpdateManyWithWhereWithoutAdminInput = {
    where: MasjidScalarWhereInput
    data: XOR<MasjidUpdateManyMutationInput, MasjidUncheckedUpdateManyWithoutAdminInput>
  }

  export type MasjidScalarWhereInput = {
    AND?: MasjidScalarWhereInput | MasjidScalarWhereInput[]
    OR?: MasjidScalarWhereInput[]
    NOT?: MasjidScalarWhereInput | MasjidScalarWhereInput[]
    id?: StringFilter<"Masjid"> | string
    name?: StringFilter<"Masjid"> | string
    address?: StringFilter<"Masjid"> | string
    contactInfo?: StringFilter<"Masjid"> | string
    adminId?: StringFilter<"Masjid"> | string
  }

  export type HomeUpsertWithWhereUniqueWithoutUserInput = {
    where: HomeWhereUniqueInput
    update: XOR<HomeUpdateWithoutUserInput, HomeUncheckedUpdateWithoutUserInput>
    create: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
  }

  export type HomeUpdateWithWhereUniqueWithoutUserInput = {
    where: HomeWhereUniqueInput
    data: XOR<HomeUpdateWithoutUserInput, HomeUncheckedUpdateWithoutUserInput>
  }

  export type HomeUpdateManyWithWhereWithoutUserInput = {
    where: HomeScalarWhereInput
    data: XOR<HomeUpdateManyMutationInput, HomeUncheckedUpdateManyWithoutUserInput>
  }

  export type HomeScalarWhereInput = {
    AND?: HomeScalarWhereInput | HomeScalarWhereInput[]
    OR?: HomeScalarWhereInput[]
    NOT?: HomeScalarWhereInput | HomeScalarWhereInput[]
    id?: StringFilter<"Home"> | string
    address?: StringFilter<"Home"> | string
    masjidId?: StringFilter<"Home"> | string
    userId?: StringFilter<"Home"> | string
  }

  export type UserCreateWithoutMasjidsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
    homes?: HomeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMasjidsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
    homes?: HomeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMasjidsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMasjidsInput, UserUncheckedCreateWithoutMasjidsInput>
  }

  export type HomeCreateWithoutMasjidInput = {
    id?: string
    address: string
    user: UserCreateNestedOneWithoutHomesInput
    mealAssignments?: MealAssignmentCreateNestedManyWithoutHomeInput
    swapRequests?: SwapRequestCreateNestedManyWithoutHomeInput
  }

  export type HomeUncheckedCreateWithoutMasjidInput = {
    id?: string
    address: string
    userId: string
    mealAssignments?: MealAssignmentUncheckedCreateNestedManyWithoutHomeInput
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutHomeInput
  }

  export type HomeCreateOrConnectWithoutMasjidInput = {
    where: HomeWhereUniqueInput
    create: XOR<HomeCreateWithoutMasjidInput, HomeUncheckedCreateWithoutMasjidInput>
  }

  export type HomeCreateManyMasjidInputEnvelope = {
    data: HomeCreateManyMasjidInput | HomeCreateManyMasjidInput[]
  }

  export type UserUpsertWithoutMasjidsInput = {
    update: XOR<UserUpdateWithoutMasjidsInput, UserUncheckedUpdateWithoutMasjidsInput>
    create: XOR<UserCreateWithoutMasjidsInput, UserUncheckedCreateWithoutMasjidsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMasjidsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMasjidsInput, UserUncheckedUpdateWithoutMasjidsInput>
  }

  export type UserUpdateWithoutMasjidsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    homes?: HomeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMasjidsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    homes?: HomeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HomeUpsertWithWhereUniqueWithoutMasjidInput = {
    where: HomeWhereUniqueInput
    update: XOR<HomeUpdateWithoutMasjidInput, HomeUncheckedUpdateWithoutMasjidInput>
    create: XOR<HomeCreateWithoutMasjidInput, HomeUncheckedCreateWithoutMasjidInput>
  }

  export type HomeUpdateWithWhereUniqueWithoutMasjidInput = {
    where: HomeWhereUniqueInput
    data: XOR<HomeUpdateWithoutMasjidInput, HomeUncheckedUpdateWithoutMasjidInput>
  }

  export type HomeUpdateManyWithWhereWithoutMasjidInput = {
    where: HomeScalarWhereInput
    data: XOR<HomeUpdateManyMutationInput, HomeUncheckedUpdateManyWithoutMasjidInput>
  }

  export type MasjidCreateWithoutHomesInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    admin: UserCreateNestedOneWithoutMasjidsInput
  }

  export type MasjidUncheckedCreateWithoutHomesInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
    adminId: string
  }

  export type MasjidCreateOrConnectWithoutHomesInput = {
    where: MasjidWhereUniqueInput
    create: XOR<MasjidCreateWithoutHomesInput, MasjidUncheckedCreateWithoutHomesInput>
  }

  export type UserCreateWithoutHomesInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
    masjids?: MasjidCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutHomesInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.Role
    masjids?: MasjidUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutHomesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHomesInput, UserUncheckedCreateWithoutHomesInput>
  }

  export type MealAssignmentCreateWithoutHomeInput = {
    id?: string
    mealType: $Enums.MealType
    date: Date | string
  }

  export type MealAssignmentUncheckedCreateWithoutHomeInput = {
    id?: string
    mealType: $Enums.MealType
    date: Date | string
  }

  export type MealAssignmentCreateOrConnectWithoutHomeInput = {
    where: MealAssignmentWhereUniqueInput
    create: XOR<MealAssignmentCreateWithoutHomeInput, MealAssignmentUncheckedCreateWithoutHomeInput>
  }

  export type MealAssignmentCreateManyHomeInputEnvelope = {
    data: MealAssignmentCreateManyHomeInput | MealAssignmentCreateManyHomeInput[]
  }

  export type SwapRequestCreateWithoutHomeInput = {
    id?: string
    mealType: $Enums.MealType
    newDate: Date | string
    status?: $Enums.SwapStatus
    requestedBy: string
    approvedBy?: string | null
  }

  export type SwapRequestUncheckedCreateWithoutHomeInput = {
    id?: string
    mealType: $Enums.MealType
    newDate: Date | string
    status?: $Enums.SwapStatus
    requestedBy: string
    approvedBy?: string | null
  }

  export type SwapRequestCreateOrConnectWithoutHomeInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutHomeInput, SwapRequestUncheckedCreateWithoutHomeInput>
  }

  export type SwapRequestCreateManyHomeInputEnvelope = {
    data: SwapRequestCreateManyHomeInput | SwapRequestCreateManyHomeInput[]
  }

  export type MasjidUpsertWithoutHomesInput = {
    update: XOR<MasjidUpdateWithoutHomesInput, MasjidUncheckedUpdateWithoutHomesInput>
    create: XOR<MasjidCreateWithoutHomesInput, MasjidUncheckedCreateWithoutHomesInput>
    where?: MasjidWhereInput
  }

  export type MasjidUpdateToOneWithWhereWithoutHomesInput = {
    where?: MasjidWhereInput
    data: XOR<MasjidUpdateWithoutHomesInput, MasjidUncheckedUpdateWithoutHomesInput>
  }

  export type MasjidUpdateWithoutHomesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutMasjidsNestedInput
  }

  export type MasjidUncheckedUpdateWithoutHomesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutHomesInput = {
    update: XOR<UserUpdateWithoutHomesInput, UserUncheckedUpdateWithoutHomesInput>
    create: XOR<UserCreateWithoutHomesInput, UserUncheckedCreateWithoutHomesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHomesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHomesInput, UserUncheckedUpdateWithoutHomesInput>
  }

  export type UserUpdateWithoutHomesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    masjids?: MasjidUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutHomesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    masjids?: MasjidUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type MealAssignmentUpsertWithWhereUniqueWithoutHomeInput = {
    where: MealAssignmentWhereUniqueInput
    update: XOR<MealAssignmentUpdateWithoutHomeInput, MealAssignmentUncheckedUpdateWithoutHomeInput>
    create: XOR<MealAssignmentCreateWithoutHomeInput, MealAssignmentUncheckedCreateWithoutHomeInput>
  }

  export type MealAssignmentUpdateWithWhereUniqueWithoutHomeInput = {
    where: MealAssignmentWhereUniqueInput
    data: XOR<MealAssignmentUpdateWithoutHomeInput, MealAssignmentUncheckedUpdateWithoutHomeInput>
  }

  export type MealAssignmentUpdateManyWithWhereWithoutHomeInput = {
    where: MealAssignmentScalarWhereInput
    data: XOR<MealAssignmentUpdateManyMutationInput, MealAssignmentUncheckedUpdateManyWithoutHomeInput>
  }

  export type MealAssignmentScalarWhereInput = {
    AND?: MealAssignmentScalarWhereInput | MealAssignmentScalarWhereInput[]
    OR?: MealAssignmentScalarWhereInput[]
    NOT?: MealAssignmentScalarWhereInput | MealAssignmentScalarWhereInput[]
    id?: StringFilter<"MealAssignment"> | string
    homeId?: StringFilter<"MealAssignment"> | string
    mealType?: EnumMealTypeFilter<"MealAssignment"> | $Enums.MealType
    date?: DateTimeFilter<"MealAssignment"> | Date | string
  }

  export type SwapRequestUpsertWithWhereUniqueWithoutHomeInput = {
    where: SwapRequestWhereUniqueInput
    update: XOR<SwapRequestUpdateWithoutHomeInput, SwapRequestUncheckedUpdateWithoutHomeInput>
    create: XOR<SwapRequestCreateWithoutHomeInput, SwapRequestUncheckedCreateWithoutHomeInput>
  }

  export type SwapRequestUpdateWithWhereUniqueWithoutHomeInput = {
    where: SwapRequestWhereUniqueInput
    data: XOR<SwapRequestUpdateWithoutHomeInput, SwapRequestUncheckedUpdateWithoutHomeInput>
  }

  export type SwapRequestUpdateManyWithWhereWithoutHomeInput = {
    where: SwapRequestScalarWhereInput
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyWithoutHomeInput>
  }

  export type SwapRequestScalarWhereInput = {
    AND?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
    OR?: SwapRequestScalarWhereInput[]
    NOT?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
    id?: StringFilter<"SwapRequest"> | string
    homeId?: StringFilter<"SwapRequest"> | string
    mealType?: EnumMealTypeFilter<"SwapRequest"> | $Enums.MealType
    newDate?: DateTimeFilter<"SwapRequest"> | Date | string
    status?: EnumSwapStatusFilter<"SwapRequest"> | $Enums.SwapStatus
    requestedBy?: StringFilter<"SwapRequest"> | string
    approvedBy?: StringNullableFilter<"SwapRequest"> | string | null
  }

  export type HomeCreateWithoutMealAssignmentsInput = {
    id?: string
    address: string
    masjid: MasjidCreateNestedOneWithoutHomesInput
    user: UserCreateNestedOneWithoutHomesInput
    swapRequests?: SwapRequestCreateNestedManyWithoutHomeInput
  }

  export type HomeUncheckedCreateWithoutMealAssignmentsInput = {
    id?: string
    address: string
    masjidId: string
    userId: string
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutHomeInput
  }

  export type HomeCreateOrConnectWithoutMealAssignmentsInput = {
    where: HomeWhereUniqueInput
    create: XOR<HomeCreateWithoutMealAssignmentsInput, HomeUncheckedCreateWithoutMealAssignmentsInput>
  }

  export type HomeUpsertWithoutMealAssignmentsInput = {
    update: XOR<HomeUpdateWithoutMealAssignmentsInput, HomeUncheckedUpdateWithoutMealAssignmentsInput>
    create: XOR<HomeCreateWithoutMealAssignmentsInput, HomeUncheckedCreateWithoutMealAssignmentsInput>
    where?: HomeWhereInput
  }

  export type HomeUpdateToOneWithWhereWithoutMealAssignmentsInput = {
    where?: HomeWhereInput
    data: XOR<HomeUpdateWithoutMealAssignmentsInput, HomeUncheckedUpdateWithoutMealAssignmentsInput>
  }

  export type HomeUpdateWithoutMealAssignmentsInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjid?: MasjidUpdateOneRequiredWithoutHomesNestedInput
    user?: UserUpdateOneRequiredWithoutHomesNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateWithoutMealAssignmentsInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjidId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutHomeNestedInput
  }

  export type HomeCreateWithoutSwapRequestsInput = {
    id?: string
    address: string
    masjid: MasjidCreateNestedOneWithoutHomesInput
    user: UserCreateNestedOneWithoutHomesInput
    mealAssignments?: MealAssignmentCreateNestedManyWithoutHomeInput
  }

  export type HomeUncheckedCreateWithoutSwapRequestsInput = {
    id?: string
    address: string
    masjidId: string
    userId: string
    mealAssignments?: MealAssignmentUncheckedCreateNestedManyWithoutHomeInput
  }

  export type HomeCreateOrConnectWithoutSwapRequestsInput = {
    where: HomeWhereUniqueInput
    create: XOR<HomeCreateWithoutSwapRequestsInput, HomeUncheckedCreateWithoutSwapRequestsInput>
  }

  export type HomeUpsertWithoutSwapRequestsInput = {
    update: XOR<HomeUpdateWithoutSwapRequestsInput, HomeUncheckedUpdateWithoutSwapRequestsInput>
    create: XOR<HomeCreateWithoutSwapRequestsInput, HomeUncheckedCreateWithoutSwapRequestsInput>
    where?: HomeWhereInput
  }

  export type HomeUpdateToOneWithWhereWithoutSwapRequestsInput = {
    where?: HomeWhereInput
    data: XOR<HomeUpdateWithoutSwapRequestsInput, HomeUncheckedUpdateWithoutSwapRequestsInput>
  }

  export type HomeUpdateWithoutSwapRequestsInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjid?: MasjidUpdateOneRequiredWithoutHomesNestedInput
    user?: UserUpdateOneRequiredWithoutHomesNestedInput
    mealAssignments?: MealAssignmentUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateWithoutSwapRequestsInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjidId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mealAssignments?: MealAssignmentUncheckedUpdateManyWithoutHomeNestedInput
  }

  export type MasjidCreateManyAdminInput = {
    id?: string
    name: string
    address: string
    contactInfo: string
  }

  export type HomeCreateManyUserInput = {
    id?: string
    address: string
    masjidId: string
  }

  export type MasjidUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    homes?: HomeUpdateManyWithoutMasjidNestedInput
  }

  export type MasjidUncheckedUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    homes?: HomeUncheckedUpdateManyWithoutMasjidNestedInput
  }

  export type MasjidUncheckedUpdateManyWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
  }

  export type HomeUpdateWithoutUserInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjid?: MasjidUpdateOneRequiredWithoutHomesNestedInput
    mealAssignments?: MealAssignmentUpdateManyWithoutHomeNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateWithoutUserInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjidId?: StringFieldUpdateOperationsInput | string
    mealAssignments?: MealAssignmentUncheckedUpdateManyWithoutHomeNestedInput
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateManyWithoutUserInput = {
    address?: StringFieldUpdateOperationsInput | string
    masjidId?: StringFieldUpdateOperationsInput | string
  }

  export type HomeCreateManyMasjidInput = {
    id?: string
    address: string
    userId: string
  }

  export type HomeUpdateWithoutMasjidInput = {
    address?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHomesNestedInput
    mealAssignments?: MealAssignmentUpdateManyWithoutHomeNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateWithoutMasjidInput = {
    address?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mealAssignments?: MealAssignmentUncheckedUpdateManyWithoutHomeNestedInput
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateManyWithoutMasjidInput = {
    address?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MealAssignmentCreateManyHomeInput = {
    id?: string
    mealType: $Enums.MealType
    date: Date | string
  }

  export type SwapRequestCreateManyHomeInput = {
    id?: string
    mealType: $Enums.MealType
    newDate: Date | string
    status?: $Enums.SwapStatus
    requestedBy: string
    approvedBy?: string | null
  }

  export type MealAssignmentUpdateWithoutHomeInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealAssignmentUncheckedUpdateWithoutHomeInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealAssignmentUncheckedUpdateManyWithoutHomeInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUpdateWithoutHomeInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SwapRequestUncheckedUpdateWithoutHomeInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SwapRequestUncheckedUpdateManyWithoutHomeInput = {
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    newDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSwapStatusFieldUpdateOperationsInput | $Enums.SwapStatus
    requestedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasjidCountOutputTypeDefaultArgs instead
     */
    export type MasjidCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasjidCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HomeCountOutputTypeDefaultArgs instead
     */
    export type HomeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HomeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasjidDefaultArgs instead
     */
    export type MasjidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasjidDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HomeDefaultArgs instead
     */
    export type HomeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HomeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealAssignmentDefaultArgs instead
     */
    export type MealAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealAssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SwapRequestDefaultArgs instead
     */
    export type SwapRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SwapRequestDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}