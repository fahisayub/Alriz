// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  name     String
  role     Role     @default(USER)
  masjids  Masjid[] @relation("UserMasjids")
  homes    Home[]   @relation("UserHomes")
}

model Masjid {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  contactInfo String
  adminId     String
  admin       User   @relation("UserMasjids", fields: [adminId], references: [id])
  homes       Home[] @relation("MasjidHomes")
}

model Home {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  address         String
  masjidId        String
  userId          String
  masjid          Masjid           @relation(fields: [masjidId], references: [id], name: "MasjidHomes")
  user            User             @relation(fields: [userId], references: [id], name: "UserHomes")
  mealAssignments MealAssignment[]
  swapRequests    SwapRequest[]
}

model MealAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  homeId   String
  mealType MealType
  date     DateTime
  home     Home     @relation(fields: [homeId], references: [id])
}

model SwapRequest {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  homeId      String
  mealType    MealType
  newDate     DateTime
  status      SwapStatus @default(PENDING)
  requestedBy String
  approvedBy  String?
  home        Home       @relation(fields: [homeId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum SwapStatus {
  PENDING
  APPROVED
  REJECTED
}
